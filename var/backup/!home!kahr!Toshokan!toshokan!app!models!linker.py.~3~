from sqlalchemy import ForeignKey
from sqlalchemy.sql import text
from sqlalchemy.orm import relationship

from .model import Base, Column, Integer, String, Sequence

class Link(Base):
    __tablename__ = 'tshk_link'
    uid = Column(Integer, Sequence('link_id_seq'), primary_key=True)

    anime_id = Column(Integer, ForeignKey('tshk_anime.uid'))
    anime_self_id = Column(Integer, ForeignKey('tshk_anime.uid'))
    anime = relationship('Anime', foreign_keys=[anime_id], lazy='joined', backref="links")
    anime_self = relationship('Anime', foreign_keys=[anime_self_id], lazy='joined')
    anime_desc = Column(String)

    manga_id = Column(Integer, ForeignKey('tshk_manga.uid'))
    manga_self_id = Column(Integer, ForeignKey('tshk_manga.uid'))
    manga = relationship('Manga', foreign_keys=[manga_id], lazy='joined')
    manga_self = relationship('Manga', foreign_keys=[manga_self_id], lazy='joined')
    manga_desc = Column(String)

    character_id = Column(Integer, ForeignKey('tshk_character.uid'))
    character_self_id = Column(Integer, ForeignKey('tshk_character.uid'))
    character = relationship('Character', foreign_keys=[character_id], lazy='joined')
    character_self = relationship('Character', foreign_keys=[character_self_id], lazy='joined')
    character_desc = Column(String)

    person_id = Column(Integer, ForeignKey('tshk_person.uid'))
    person_self_id = Column(Integer, ForeignKey('tshk_person.uid'))
    person = relationship('Person', foreign_keys=[person_id], lazy='joined')
    person_self = relationship('Person', foreign_keys=[person_self_id], lazy='joined')
    person_desc = Column(String)

    episode_id = Column(Integer, ForeignKey('tshk_episode.uid'))
    episode_self_id = Column(Integer, ForeignKey('tshk_episode.uid'))
    episode = relationship('Episode', foreign_keys=[episode_id], lazy='joined')
    episode_self = relationship('Episode', foreign_keys=[episode_self_id], lazy='joined')
    episode_desc = Column(String)

    genre_id = Column(Integer, ForeignKey('tshk_genre.uid'))
    genre_self_id = Column(Integer, ForeignKey('tshk_genre.uid'))
    genre = relationship('Genre', foreign_keys=[genre_id], lazy='joined')
    genre_self = relationship('Genre', foreign_keys=[genre_self_id], lazy='joined')
    genre_desc = Column(String)

    song_id = Column(Integer, ForeignKey('tshk_song.uid'))
    song_self_id = Column(Integer, ForeignKey('tshk_song.uid'))
    song = relationship('Song', foreign_keys=[song_id], lazy='joined')
    song_self = relationship('Song', foreign_keys=[song_self_id], lazy='joined')
    song_desc = Column(String)

    company_id = Column(Integer, ForeignKey('tshk_company.uid'))
    company_self_id = Column(Integer, ForeignKey('tshk_company.uid'))
    company = relationship('Company', foreign_keys=[company_id], lazy='joined')
    company_self = relationship('Company', foreign_keys=[company_self_id], lazy='joined')
    company_desc = Column(String)

    user_id = Column(Integer, ForeignKey('tshk_user.uid'))
    user_self_id = Column(Integer, ForeignKey('tshk_user.uid'))
    user = relationship('User', foreign_keys=[user_id], lazy='joined')
    user_self = relationship('User', foreign_keys=[user_self_id], lazy='joined')

    user_desc = Column(String)

    main_kind = Column(String)
    main_id = Column(Integer)

    def __repr__(self):
        out = ''
        out += '<Link(uid={}, '.format(self.uid)
        valid_ids = []
        for x in dir(self):
            try:
                if '_id' in x and getattr(self, x):
                    valid_ids.append(x)
            except:
                pass
        for id_ in valid_ids:
            out += '{}={}, '.format(id_, getattr(self, id_))
        out = out[:-2]
        out += ')>'

        return out

def link(sess, data):
    l = Link()
    for s in data:
        setattr(l, s[0], s[1])
    sess.add(l)
    sess.commit()

def get_linked(sess, objs, other=[]):
    qstr = ''
    for obj in objs:
        n = '{}_id'.format(obj.__class__.__name__.lower())
        qstr += '{}={} and '.format(n, obj.uid)
    for thing in other:
        # This test never fails right now
        if isinstance(thing[1], str):
            qstr += "{}='{}' and ".format(thing[0], thing[1])
        else:
            qstr += '{}={} and '.format(thing[0], thing[1])
    qstr = text(qstr[:-5])
    return sess.query(Link).filter(qstr).all()
