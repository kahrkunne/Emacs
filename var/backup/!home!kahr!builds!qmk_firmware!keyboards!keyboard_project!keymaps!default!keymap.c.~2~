/* Copyright 2017 REPLACE_WITH_YOUR_NAME
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include "keyboard_project.h"
#include <stdio.h>

enum custom_keycodes {
  SW_UC = SAFE_RANGE,
  DYNAMIC_MACRO_RANGE,
  SCNC,
};

#include "dynamic_macro.h"

#define KM_N     0
#define KM_FN    1
#define KM_FN_SH 2
#define KM_SCNC  3


const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
  [KM_N] = KEYMAP( /* Base */
KC_GRAVE,  KC_1,    KC_2,    KC_3,    KC_4,   KC_5,   KC_6,    KC_7,    KC_8,     KC_9,   KC_0,      KC_MINUS,  KC_EQUAL, MO(KM_SCNC), KC_ESC, \
KC_TAB,      KC_Q,    KC_W,    KC_E,    KC_R,   KC_T,   KC_Y,    KC_U,    KC_I,     KC_O,   KC_P,      KC_LBRC,   KC_RBRC,  KC_BSLASH, \
KC_CAPS,      KC_A,    KC_S,    KC_D,    KC_F,   KC_G,   KC_H,    KC_J,    KC_K,     KC_L,   KC_SCOLON, KC_QUOTE, KC_ENTER, \
KC_LSHIFT,     KC_Z,    KC_X,    KC_C,    KC_V,   KC_B,   KC_N,    KC_M,    KC_COMMA, KC_DOT, KC_SLASH,  KC_UP,   MO(KM_FN),    KC_PGUP, \
KC_LCTL,    KC_LGUI,    KC_LALT,   KC_BSPC,               KC_SPC,                     KC_DEL, KC_LEFT,   KC_DOWN, KC_RIGHT, KC_PGDN
),
  [KM_FN] = KEYMAP(
KC_SYSREQ,       KC_F1,       KC_F2,      KC_F3,        KC_F4,          KC_F5,      KC_F6,    KC_F7,      KC_F8,      KC_F9,      KC_F10,     KC_F11,     KC_F12,  DEBUG, RESET, \
DYN_MACRO_PLAY1, KC_TRNS,     KC_TRNS,    UC(0x03b5),   UC(0x03c1),     UC(0x03c4), UC(0xA5), KC_TRNS,    KC_TRNS,    UC(0x03c9), UC(0x03c0), KC_TRNS,    KC_TRNS, KC_MNXT, \
KC_TRNS,         UC(0x03b1),  UC(0x03c3), UC(0x03b4),   UC(0x03c6),     KC_TRNS,    KC_TRNS,  KC_TRNS,    UC(0x03ba), UC(0x03bb), UC(0x2122), KC_TRNS,    KC_MPLY, \
MO(KM_FN_SH),    UC(0x03b6),  KC_TRNS,    UC(0x03b3),   KC_TRNS,        UC(0x03b2), KC_TRNS,  UC(0x03bc), KC_TRNS,    KC_TRNS,    KC_TRNS,    KC_VOLU,    KC_TRNS, KC_HOME, \
KC_TRNS,         KC_TRNS,     KC_TRNS,    DYN_REC_STOP, DYN_REC_START1, SW_UC,      KC_MPRV,  KC_VOLD,    KC_MNXT,    KC_END
),
  [KM_FN_SH] = KEYMAP(
KC_TRNS,         KC_TRNS,    KC_TRNS,    KC_TRNS,    KC_TRNS,        S(KC_F5),   KC_TRNS, KC_TRNS,    KC_TRNS,    KC_TRNS,    KC_TRNS,    KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, \
DYN_MACRO_PLAY2, KC_TRNS,    KC_TRNS,    UC(0x0395), UC(0x03a1),     UC(0x03a4), KC_TRNS, KC_TRNS,    KC_TRNS,    UC(0x03a9), UC(0x03a0), KC_TRNS, KC_TRNS, KC_TRNS, \
KC_TRNS,         UC(0x0391), UC(0x03a3), UC(0x0394), UC(0x03a6),     KC_TRNS,    KC_TRNS, KC_TRNS,    UC(0x039a), UC(0x039b), UC(0x00AE), KC_TRNS, KC_TRNS, \
KC_TRNS,         UC(0x0396), KC_TRNS,    UC(0x03b3), KC_TRNS,        UC(0x0392), KC_TRNS, UC(0x039c), KC_TRNS,    KC_TRNS,    KC_TRNS,    KC_TRNS, KC_TRNS, KC_TRNS, \
KC_TRNS,         KC_TRNS,    KC_TRNS,    KC_TRNS,    DYN_REC_START2, KC_TRNS,    KC_TRNS, KC_TRNS,    KC_TRNS,    KC_TRNS
),
  [KM_SCNC] = KEYMAP(
KC_TRNS, KC_TRNS,    KC_TRNS,    UC(0x2204), KC_TRNS,    KC_TRNS, UC(0x2227),    KC_TRNS, UC(0x2229), KC_TRNS,    KC_TRNS, UC(0x2262), UC(0x2261), KC_TRNS,    KC_TRNS, \
KC_TRNS, KC_TRNS,    KC_TRNS,    UC(0x2203), KC_TRNS,    KC_TRNS, KC_TRNS,    KC_TRNS, UC(0x222A), KC_TRNS,    KC_TRNS, UC(0x2208),   UC(0x2209), UC(0x2223), \
KC_TRNS, UC(0x2200), UC(0x221A), KC_TRNS,    UC(0x222B), KC_TRNS, KC_TRNS,    KC_TRNS, KC_TRNS,    KC_TRNS,    KC_TRNS, KC_TRNS,      KC_TRNS, \
KC_TRNS, KC_TRNS,    KC_TRNS,    KC_TRNS,    KC_TRNS,    KC_TRNS, UC(0x2115), KC_TRNS, UC(0x2235), UC(0x2234), KC_TRNS, KC_TRNS,      KC_TRNS,    KC_TRNS, \
KC_TRNS, KC_TRNS,    KC_TRNS,    KC_TRNS,    KC_TRNS,    KC_TRNS, KC_TRNS,    KC_TRNS, KC_TRNS,    KC_TRNS
),

  [4] = KEYMAP(
KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,\
KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,\
KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,\
KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,\
KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS
),

};


const uint16_t PROGMEM fn_actions[] = {

};

const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
      switch(id) {
        case 0:
          if (record->event.pressed) {
            register_code(KC_RSFT);
          } else {
            unregister_code(KC_RSFT);
          }
        break;
      }
    return MACRO_NONE;
};


int unicode_status = 0;
void matrix_init_user(void) {
  set_unicode_input_mode(UC_LNX);
  unicode_status = 0;
}

void matrix_scan_user(void) {

}

bool process_record_user(uint16_t keycode, keyrecord_t *record) {
  if (!process_record_dynamic_macro(keycode, record)) {
      return false;
  }
  switch(keycode){
  case SW_UC:
    if (record->event.pressed) {
      switch(unicode_status){
      case 0:
	unicode_status++;
	set_unicode_input_mode(UC_OSX);
	break;
      case 1:
	unicode_status++;
	set_unicode_input_mode(UC_WIN);
	break;
      case 2:
	unicode_status = 0;
	set_unicode_input_mode(UC_LNX);
	break;
      }
    }
 }
    return true;
};


void led_set_user(uint8_t usb_led) {

}
