\documentclass[a4paper]{article}

\usepackage{a4wide,times}
\usepackage[english]{babel}

% -----------------------------------------------
% especially use this for you code
% -----------------------------------------------

\usepackage{courier}
\usepackage{listings}
\usepackage{color}

\definecolor{Gray}{gray}{0.95}

\lstset{ %
	language = C,                   % choose the language of the code
	basicstyle = \small\ttfamily,   % the size and fonts that are used
	frame = single,                 % adds a frame around the code
	tabsize = 3,                    % sets default tabsize
	breaklines = true,              % sets automatic line breaking
	numbers = left,                 % where to put the line-numbers
	numberstyle = \footnotesize,    % the style of the line-numbers
	backgroundcolor = \color{Gray}  % the background color of the listing
}

% -- until here ---------------------------------

\begin{document}


\title{Programming report \\
       assignment 1 for A\&DinC
}
\date{\today}
\author{Kahr Kunne (S3435342) \\
        Merijn Schr\"{o}der (S3328481)
}

\maketitle

\section{Problem description}
\paragraph{General:}
Write a C program that converts a bar representation of a digital signal into a layer representation of that same signal.\\

\paragraph{Input-output behaviour:}
Our input of consists of the following:

\begin{itemize}
\item A number n (with $0 \leq n \leq 1000$) indicating the number of digital signals
\item $n$ times the following:
  \begin{itemize}
    \item A line containing the length $l$ of the signal
    \item A sequence of $l$ non-negative integers
  \end{itemize}
\end{itemize}

Our output is $n$ lines of intervals of the following form: \begin{verbatim}[start, end)@level\end{verbatim}

Example input:
\begin{verbatim}
3
9
1 3 3 5 5 7 7 4 4
12
3 3 3 1 1 2 2 2 4 4 4 2
8 
0 1 0 1 0 1 0 1
\end{verbatim}
Example output:
\begin{verbatim}
[5,7)@7 [5,7)@6 [3,7)@5 [3,9)@4 [1,9)@3 [1,9)@2 [0,9)@1 
[0,3)@3 [0,3)@2 [8,11)@4 [8,11)@3 [5,12)@2 [0,12)@1 
[1,2)@1 [3,4)@1 [5,6)@1 [7,8)@1 
\end{verbatim}

\section{Problem analysis}
The best way to solve this problem is to make the situation more abstract. This can be done by converting the signals into another structure: a stack. Every time point is 'connected' to its own value which represents the height of a the signal at that time point. Now let's say at every time point the value of the height of the signal is equal to the height of the stack. So when at a certain time point the value of the signal is seven, the height of the stack at that time point is also seven.

In this way, the height at certain time points are known. This means when at the next time point the value of the signal is for instance 3 less than the previous one, the upper 3 layers ended at that time point. This means the end point and the value of the signal are known. The only thing unknown is the starting point corresponding to the particular value.

the height of the stack and the time points corresponding to a certain stack are already used. The values stored in the stack are not defined yet. These values can be set to the starting points of a certain layer. For instance: the stack has height 2. The next signal has height 5. This means values should be added to the stack. These values will be the time point at that moment. In this way, when the values are removed from the stack, it is also clear at what time point the particular layer started.

What the program should do is defined for two cases: when the new height is greater than the original height (add layers to the stack) and when the new height is less than the original height (remove layers from the stack). There is one possible case left: when the new height is equal to the original height. Because in this case all layers are already in the stack with their starting points and no layers ended, nothing has to be done.

\section{Program design}
The input consist of a number of $n$ signals. This means the algorithm has to be executed $n$ times. The best way to do this is to use a for-loop. After that, the input of every signal starts with an integer $l$ which says how many time points there are in the signal. Because at every time point certain operations have to be executed, there is another for-loop needed which executes $l$ times. At the begin of every loop, an integer should be scanned which represents the value of the signal at the $j$th time point.

After the stack is implemented, there are three possible cases which are mentioned before: the value is greater than the original value, the value is less than the original value or they are equal. An if-statement can be used to execute the right operations in every situation.

After the last integer has been scanned, the new height should be set to zero. This way the program ends all layers / removes everything from the stack.

\paragraph{Time complexity.}
The time complexity of this program is ${\cal O}(n^3)$ because of the three nested for-loops. Although this is bad, in practise the program will most of the time be faster than ${\cal O}(n^3)$. This is because the last for loop most of the time only repeats less than five times, sometimes even zero.

It is hard to reduce the time complexity because at every time point, there are operations which need to be done. This means the program must loop through all time points. There is no other way.

\section{Evaluation of the program}

The program was tested with the following input:
\begin{verbatim}
3
9
1 3 3 5 5 7 7 4 4
12
3 3 3 1 1 2 2 2 4 4 4 2
8 
0 1 0 1 0 1 0 1
\end{verbatim}
and gave the following output:
\begin{verbatim}
[5,7)@7 [5,7)@6 [3,7)@5 [3,9)@4 [1,9)@3 [1,9)@2 [0,9)@1 
[0,3)@3 [0,3)@2 [8,11)@4 [8,11)@3 [5,12)@2 [0,12)@1 
[1,2)@1 [3,4)@1 [5,6)@1 [7,8)@1 
\end{verbatim}
which is right. The program also passed all of the tests in Themis.

In order to check for memory leaks, \verb!valgrind! was applied with the input mentioned above. We could conclude from the results that there were no memory leaks.

\section{Extension of the program (optional)}

[ \textit{In this optional section you describe any extensions you made to the program. 
Indicate whether you followed one of the suggested extra's, or that you came up with an extension of your own.} ]

\section{Process description}
At first, it was hard to fully understand the problem; it was clear what the output should be but how could we translate it in another problem which is solvable. When we thought we found the best way to solve the problem and started to translate it in C, we concluded it was hard to get the right starting point of each layer without using an unnecessary amount of memory. To get this right, we had to rewrite our solution a bit before we were able to write it in C. The actual coding was relatively easy because the code of the data structure was already given and there were no uncommon structures needed.

We did everything together; problem solving, coding and writing this report. This means we both spent the same amount of time on this assignment and we did the same amount of work. 

\section{Conclusions}
The program works as intended; it passed all tested inputs. But, unfortunately, it is not very efficient. There is probably a more efficient way to solve this problem but this would make it harder to implement in C or even unreliable

\section{Appendix: program text}

[ \textit{Here you provide the program text. 
It should correspond exactly with the final program that you submitted to Themis. 
If this is not the case, motivate why there are differences and indicate clearly what they are. 
The program should contain appropriate comments so as to improve readability. 
The program should satisfy the criteria given in Appendix D of the lecture notes. 
This \LaTeX\ file contains an example how to include program files.} ]

%\lstinputlisting[caption = \tt prog.c]{prog.c}

\section{Appendix: test sets}

[ \textit{When you use large test sets for the evaluation of the program, you can give them here.} ]

\section{Appendix: extended program text (optional)}

[ \textit{In this optional section you provide the text of the extended program. 
The same criteria apply as for the program text.} ]

\end{document}
