<template>
  <div class="modal-card edit-form">
    <header class="modal-card-head">
      <p class="modal-card-title has-text-centered">{{item.title}}</p>
    </header>
    <section class="modal-card-body">
      <b-field label="Status" horizontal>
        <b-select v-model="entry.status">
          <option v-for="option in statuses" :key="option">
            {{option}}
          </option>
        </b-select>
      </b-field>

      <b-field label="Score" horizontal>
        <b-input v-model="entry.score">
        </b-input>
      </b-field>

      <b-field id="progress-field" :label="progressName" horizontal>
        <button v-if="(itemProgress == null) || (entry.progress < itemProgress)" class="plus1-button button is-primary" @click="entry.progress++">+</button>

        <b-input v-model="entry.progress">
        </b-input>

        <button class="button is-static counter">/ {{itemProgress}} </button>
      </b-field>

      <b-field v-if="type !='anime'" id="volumes-field" label="Volumes" horizontal>
        <button v-if="(item.volume_count == null) || (entry.volumes < item.volume_count)" class="plus1-button button is-primary" @click="entry.volumes++">+</button>
        <b-input v-model="entry.volumes">
        </b-input>

        <button class="button is-static counter">/ {{item.volume_count}} </button>
      </b-field>

      <b-field label="Start Date" horizontal>
        <b-datepicker :date-formatter="(date) => $moment(date).format('MMM DD, YYYY')"
                      v-model="entry.start_date"
                      placeholder="Choose..."
                      icon="calendar-today">
        </b-datepicker>
      </b-field>

      <b-field label="End Date" horizontal>
        <b-datepicker :date-formatter="(date) => $moment(date).format('MMM DD, YYYY')"
                      v-model="entry.end_date"
                      placeholder="Choose..."
                      icon="calendar-today">
        </b-datepicker>
      </b-field>

      <b-field :label="repetitionsName" horizontal>
        <button class="plus1-button button is-primary" @click="entry.repetitions++">+</button>
        <b-input v-model="entry.repetitions">
        </b-input>
      </b-field>

      <b-field id="comments-field" label="Comments">
        <b-input v-model="entry.comments" type="textarea"></b-input>
      </b-field>

    </section>
    <footer class="modal-card-foot has-text-centered">
      <span class="is-fullwidth is-centered">
        <button class="button" type="button" @click="$parent.close()">Cancel</button>
        <button class="button is-primary" type="button" @click="updateEntry(); $parent.close()">Save</button>
      </span>
    </footer>
  </div>
</template>
<script>
  import { get_status_pretty, get_status_api } from '~/utils/list/status.js'
  export default {
    props: {
      type: String,
      pass_entry: Object,
      raw_entry: Boolean,
      item: Object
    },
    data() {
      return {
        loading: true,
        entry: null
      }
    },
    async created() {
      if (!this.pass_entry) {
        await this.fetchEntry()
      } else {
        this.raw_entry ? this.initializeEntry({ ...this.pass_entry }) : (this.entry = { ...this.pass_entry })
      }
      this.loading = false
    },
    methods: {
      async addEntry() {
        // Add a new entry with some default settings
        this.entry = {
          progress: 0,
          score: null,
          status: "Planned",
          start_date: null,
          end_date: null,
          repetitions: 0,
          comments: '',
	  volumes: 0
        }
        await this.updateEntry()
      },
      async fetchEntry() {
        // Fetch the entry from the server
        var serverEntry = await this.$axios.$get(this.apiUrl)
        if (serverEntry) {
          this.initializeEntry(serverEntry)
        } else {
          this.entry = null
        }
      },
      initializeEntry(rawEntry) {
        // Initialize this.entry for editing
        this.entry = {
          ...rawEntry
        }
        this.entry.status = get_status_pretty(this.type)[rawEntry.status]
        this.entry.start_date = this.entry.start_date == null ? null : new Date(this.entry.start_date)
        this.entry.end_date = this.entry.end_date == null ? null : new Date(this.entry.end_date)
      },
      incrementProgress() {
        this.entry.progress = parseInt(this.entry.progress) + 1
        this.updateEntry()
      },
      incrementRepetitions() {
        this.entry.repetitions = parseInt(this.entry.repetitions) + 1
        this.updateEntry()
      },
      incrementVolumes() {
        this.entry.volumes = parseInt(this.entry.volumes) + 1
        this.updateEntry()
      },
      async updateEntry() {
	if(this.entry.progress == this.itemProgress){
	    this.entry.status = get_status_pretty(this.type)["completed"]
	    this.entry.volumes = this.item.volume_count // This will still work for manga, since volumes is just ignored in that case
	}

	if(this.entry.progress != 0 && this.convertedEntry.status == "planned"){
	    this.entry.status = get_status_pretty(this.type)["current"]
	}

        await this.$axios.$put(this.apiUrl, this.convertedEntry)
      }

    },
    computed: {
      repetitionsName() {
        return this.type == 'anime' ? 'Rewatched' : 'Reread'
      },
      apiUrl() {
        return `/list/${this.type}/${this.item._id}`
      },
      itemProgress() {
        if (this.type == 'anime') {
          return this.item.episode_count
        } else if (this.type == 'manga') {
          return this.item.chapter_count
        }
      },
      progressName() {
        // For displaying
        if (this.type == 'anime') {
          return 'Episodes'
        } else {
          return 'Chapters'
        }
      },
      upcasedType() {
        // Name of the type, but with the first letter as a capital, for display
        return this.type.charAt(0).toUpperCase() + this.type.substr(1)
      },
      statuses() {
        return Object.keys(get_status_api(this.type))
      },
      convertedEntry() {
        // This is what's actually sent to the API
	if(this.entry != null){
	    var entry = {
		progress: parseInt(this.entry.progress),
		score: parseFloat(this.entry.score),
		status: get_status_api(this.type)[this.entry.status],
		start_date: this.entry.start_date ? new Date(this.entry.start_date).toISOString() : null,
		end_date: this.entry.end_date ? new Date(this.entry.end_date).toISOString() : null,
		repetitions: parseInt(this.entry.repetitions),
		comments: this.entry.comments
	    }
	    if (this.type == 'manga' || this.type == 'novel') {
		entry.volumes = parseInt(this.entry.volumes)
	    }
	} else {
	    var entry = {}
	}
	return entry
      }
    }
  }

</script>
<style scoped>
 .edit-form >>> .is-horizontal {
     margin-bottom: 5px;
 }

 .edit-form >>> .field {
     margin-right: 0;
 }

 .edit-form >>> label {
     width: 400px;
     text-align: left;
 }

 .edit-form >>> select {
     text-align-last: right;
 }

 .edit-form >>> .counter {
     border-left: none;
 }

 .edit-form >>> .plus1-button {
     width: 2.5rem;
     border-right: none;
 }

 
 .edit-form >>> input, .modal-card >>> select {
     text-align: right;
     padding-top: 0;
     padding-bottom: 0;
 }

 .edit-form >>> .pagination a{
     margin: 0;
 }
 .edit-form >>> .pagination-previous {
     border-right: none;
 }

 .edit-form >>> .pagination-next {
     border-left: none;
 }

 .edit-form >>> option {
     direction: rtl;
 }

 .edit-form >>> select {
     width: 100%;
 }

 .edit-form >>> .pagination-list select{
     text-align: center;
     width: auto;
 }

 .edit-form >>> span.select {
     width: 100%;
     margin-bottom: 5px;
 }

 .edit-form >>> .is-fullwidth {
     width: 100%;
 }

 .edit-form >>> a.pagination-previous {
     margin-top: 1px !important;
 }

 .modal-card { overflow: visible; }
 .modal-card-body { overflow: visible; } 
</style>
