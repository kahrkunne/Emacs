"""Utilities for fetching data from MAL."""
import functools
import pickle
import json

import tornado
from tornado.httpclient import AsyncHTTPClient
from lxml import html as lh
import anime_db

from config import (comments_page_delay, max_clients, request_timeout,
                    save_profile_link, profile_link_save_interval, profile_link_file,
                    fetch_set, fetch_interval, profile_delay)
from debug import log

AsyncHTTPClient.configure("tornado.curl_httpclient.CurlAsyncHTTPClient")
http_client = AsyncHTTPClient()
http_client.max_clients = max_clients
http_client.request_timeout = request_timeout

io_loop = tornado.ioloop.IOLoop.current()
io_loop.handle_callback_exception = lambda *args: None

user_session = anime_db.generate_session(anime_db.User)
list_session = anime_db.generate_session(anime_db.ListEntry)

profile_links = []
processed_ids = []

user_pages = {}

profile_link_counter = 0

def store_profile_link(link):
    """Store a link to a user profile.
    Will always store in a global list `profile_links`; will also store in a file depending on config."""
    log('(fetch.store_profile_link) NOTICE storing profile link: {}'.format(link), 4)
    global profile_links
    global profile_link_counter

    profile_links.append(link)
    profile_link_counter += 1

    if save_profile_link and (profile_link_counter % profile_link_save_interval == 0):
        log('(fetch.store_profile_link) NOTICE saving profile links!', 3)
        with open(profile_link_file + str(fetch_set), 'wb') as f:
            pickle.dump(profile_links, f)

def get_user_profile_link(uid, proxy):
    """Get a link to MAL user profile from user id."""
    def handle_response(response):
        if response.error:
            log('(fetch.get_user_profile_link.handle_response) ERROR fetching uid: {}; returned: {}'
                .format(uid, response.error), 4)
            if response.error == "HTTP 404: Not Found":
                processed_ids.append(uid)
        else:
            data = response.body
            name = lh.fromstring(data).find(".//title").text.strip().split(' ')[0].split("'")[0]
            url = "https://myanimelist.net/profile.php?username=" + name
            processed_ids.append(uid)
            store_profile_link(url)

    comments_url = "https://myanimelist.net/comments.php?id=" + str(uid)
    io_loop.call_later(comments_page_delay, functools.partial(http_client.fetch, comments_url, handle_response,
                                                              proxy_host=proxy['host'], proxy_port=proxy['port']))

def queue_user_profile_link_fetch():
    """Queue user profile links for fetching."""
    for x in range((fetch_set - 1) * fetch_interval,fetch_set * fetch_interval):
        get_user_profile_link(x, {'host': None, 'port': None})

def get_user_profile(url, proxy):
    """Fetch a user's MAL profile, and store the data in the database."""
    def handle_response(response):
        if response.error:
            log('(fetch.get_user_profile.handle_response) ERROR fetching url: {}; returned: {}'
                .format(url, response.error), 4)
        else:
            data = response.body
            anime_db.add_user(user_session, data)

    io_loop.call_later(profile_delay, functools.partial(http_client.fetch, url, handle_response,
                                                        proxy_host=proxy['host'], proxy_port=proxy['port']))

def get_user_list(name, proxy={'host':None, 'port':None}, offset=0, user=[]):
    """Fetch a user's anime list, and store the data in the database."""
    def handle_response(response):
        if response.error:
            log('(fetch.get_user_list.handle_response) ERROR fetching user: {}; returned: {}; url: {}'
                .format(name, response.error, response.title), 2)
        elif response.body == '[]':
            print(user)
            #anime_db.add_list(list_session, user, name)
        else:
            data = response.body
            print(data)
            new_user = user + json.loads(data)
            get_user_list(name, proxy, offset=(offset + 300), user=new_user)

    url = "https://myanimelist.net/animelist/{}/load.json?status=7&offset={}".format(name, offset)
    print(url)
    io_loop.call_later(profile_delay, functools.partial(http_client.fetch, url, handle_response,
                                                        proxy_host=proxy['host'], proxy_port=proxy['port']))
