/* TODO: make dynamic arrays
 * LEFTOF: check infix expression
 */

#include <stdio.h>  /* printf */
#include <stdlib.h> /* malloc, free */
#include <assert.h> /* assert */
#include <string.h>
#include <ctype.h>
#include "scanner.h"
#include "recognizeExp.h"
#include "evalExp.h"
#include "infixExp.h"

/* The function newExpTreeNode creates a new node for an expression tree.
 */

ExpTree newExpTreeNode(TokenType tt, Token t, ExpTree tL, ExpTree tR) {
	ExpTree new = malloc(sizeof(ExpTreeNode));
	assert (new!=NULL);
	new->tt = tt;
	new->t = t;
	if (new->tt == Identifier) printf("new->t.identifier: %s\n", (new->t).identifier);
	new->left = tL;
	new->right = tR;
	printf("return new\n");
	return new;
}

/* The function valueIdentifier recognizes an identifier in a token list and
 * makes the second parameter point to it.
 */

int valueIdentifier(List *lp, char **sp) {
	if (*lp != NULL && (*lp)->tt == Identifier ) {
		*sp = ((*lp)->t).identifier;
		*lp = (*lp)->next;
		return 1;
	}
	return 0;
}

/* The function valueOperator recognizes an arithmetic operator in a token list
 * and makes the second parameter point to it.
 * Here the auxiliary function isOperator is used.
 */

int isOperator(char c) {
	return ( c == '+' || c == '-' || c == '*' || c == '/');
}

int valueOperator(List *lp, char *cp) {
	if (*lp != NULL && (*lp)->tt == Symbol && isOperator(((*lp)->t).symbol)) {
		*cp = ((*lp)->t).symbol;
		*lp = (*lp)->next;
		return 1;
	}
	return 0;
}

/* The function freeExpTree frees the memory of the nodes in the expression tree.
 * Observe that here, unlike in freeList, the strings in identifier nodes
 * are not freed. The reason is that the function newExpTree does not allocate
 * memory for strings in nodes, but only a pointer to a string in a node
 * in the token list.
 */

void freeExpTree(ExpTree tr) {
	if (tr==NULL) {
		return;
	}
	freeExpTree(tr->left);
	freeExpTree(tr->right);
	free(tr);
}

int priority(char c) {
  switch (c) {
    case '+':
    case '-':
      return 3;
    case '*':
    case '/':
      return 2;
    case '(':
    case ')':
      return 1;
  }
  return -1;
}

ExpTree addToTree(ExpTree tree, int j) {
	Token t;
	if (tree == NULL) {
		t.number = j;
		return newExpTreeNode(Number, t, NULL, NULL);
	}

	if (tree->t.number < j) {
		tree->right = addToTree(tree->right, j);
	} else if (tree->t.number > j) {
		tree->left = addToTree(tree->left, j);
	}
	return tree;
}

ExpTree addOperands(ExpTree tree, char *operand, int *i, char *operator) {
	if (tree == NULL) {
		Token t;
		char str[50];
		int l = 0;
		while (operand[*i] != '$') {
			str[l++] = operand[*i];
			*i = *i + 1;
		}
		*i =  *i + 1;
		str[l] = '\0';
		
		if ( isdigit(str[0]) ) {
			int val = atoi(str);
			t.number = val;
			return newExpTreeNode(Number, t, NULL, NULL);
		} else {
			printf("string: %s\n", str);
			t.identifier = str;
			printf("t.identifier == %s\n", t.identifier);
			return newExpTreeNode(Identifier, t, NULL, NULL);
		}
	}
	/* change index number to operator */
	tree->t.symbol = operator[tree->t.number];
	tree->tt = Symbol;
	tree->left = addOperands(tree->left, operand, i, operator);
	tree->right = addOperands(tree->right, operand, i, operator);
	printf("tree during function ");
	printExpTreeInfix(tree);
	printf("\n");
	return tree;
}

void treeInfixExpression(List *lp, ExpTree *tp) {
	char operator[100], operand[100];
	int i, j = i = 0;

	/* divide expression in two different arrays */
	int length = 0;
	char num[5];
	while (*lp != NULL) {
		switch ( (*lp)->tt ) {
		case Number:
			/* convert numbers to chars */
			sprintf(num, "%d", ((*lp)->t).number);
			int k = 0;
			while (num[k] != '\0') {
				operand[i++] = num[k++];
			}
			operand[i++] = '$';
			break;
		case Identifier:
			for (int k = 0; k < strlen( ((*lp)->t).identifier ); k++) {
				operand[i++] = ((*lp)->t).identifier[k];
			}
			operand[i++] = '$';
			break;
		case Symbol:
			operator[j++] = ((*lp)->t).symbol;
			break;
		}
		*lp = (*lp)->next;
		length++;
	}
	operand[i] = operator[j] = '\0';
	printf("operand: %s\n", operand);
	/* generate tree of only operators */
	for (int prior = 3; prior > 0; prior--) {
		for (int k = strlen(operator); k >= 0; k--) {    
			if (priority(operator[k]) == prior) {
				if (prior == 1) k--;
				*tp = addToTree(*tp, k);
				if (prior == 1)	k--;
			} else if (priority(operator[k]) == 1) {
				k = k - 2;
			}
		}
	}

	/* add operands to the tree */
	i = 0;
	*tp = addOperands(*tp, operand, &i, operator);
	printf("tree in function: ");
	printExpTreeInfix(*tp);
	printf("\n");
}

int infixExpression(List *lp) {
	if (*lp == NULL) return 0;
	double w;
	char *s;
	char c;
	if ( valueNumber(lp,&w) || valueIdentifier(lp,&s) ) {
		if ( valueOperator(lp,&c) ) {
			return infixExpression(lp);
		}
		return 1;
	} else if ((*lp)->t.symbol == '(') {
		*lp = (*lp)->next;
		if ( infixExpression(lp) && (*lp)->t.symbol == ')' ) {
			*lp = (*lp)->next;
			if (*lp != NULL && valueOperator(lp,&c) ) {
				return infixExpression(lp);
			} else if (*lp == NULL) {
				return 1;
			} else {
				return 0;
			}
		}
		return 0;
	}
	return 0;
}

/* The function printExpTreeInfix does what its name suggests.
 */

void printExpTreeInfix(ExpTree tr) {
	if (tr == NULL) {
		return;
	}
	switch (tr->tt) {
	case Number: 
		printf("%d",(tr->t).number);
	 break;
	case Identifier: 
		printf("isalpha(): %d\n", isalpha((tr->t).identifier));
		printf("%s",(tr->t).identifier);
		break;
	case Symbol: 
		printf("(");
		printExpTreeInfix(tr->left);
		printf(" %c ",(tr->t).symbol);
		printExpTreeInfix(tr->right);
		printf(")");
		break;
	}
}

/* The function isNumerical checks for an expression tree whether it represents 
 * a numerical expression, i.e. without identifiers.
 */

int isNumerical(ExpTree tr) {
	assert(tr!=NULL);
	if (tr->tt==Number) {
		return 1;
	}
	if (tr->tt==Identifier) {
		return 0;
	}
	return (isNumerical(tr->left) && isNumerical(tr->right));
}

/* The function valueExpTree computes the value of an expression tree that represents a
 * numerical expression.
 */

double valueExpTree(ExpTree tr) {  /* precondition: isNumerical(tr)) */
	double lval, rval;
	assert(tr!=NULL);
	if (tr->tt==Number) {
		return (tr->t).number;
	}
	lval = valueExpTree(tr->left);
	rval = valueExpTree(tr->right);
	switch ((tr->t).symbol) {
	case '+':
		return (lval + rval);
	case '-':
		return (lval - rval);
	case '*':
		return (lval * rval);
	case '/':
		assert( rval!=0 );
		return (lval / rval);
	default:
		abort();
	}
}

/* the function prefExpressionExpTrees performs a dialog with the user and tries
 * to recognize the input as a prefix expression. When it is a numerical prefix 
 * expression, its value is computed and printed.
 */ 

void infExpTrees() {
	char *ar;
	List tl, tl1;  
	ExpTree t = NULL; 
	printf("give an expression: ");
	ar = readInput();
	while (ar[0] != '!') {
		tl = tokenList(ar);
    printList(tl);
		tl1 = tl;
		if ( infixExpression(&tl1) && tl1 == NULL ) { 
		/* there should be no tokens left */
			treeInfixExpression(&tl,&t);
			printf("in infix notation: ");
			printExpTreeInfix(t);
			printf("\n");
			if ( isNumerical(t) ) {
				printf("the value is %g\n",valueExpTree(t));
			} else {
				printf("this is not a numerical expression\n");
			}
		} else {
			printf("this is not a infix expression\n"); 
		}
		freeExpTree(t);
		t = NULL; 
		freeTokenList(tl);  
		free(ar);
		printf("\ngive an expression: ");
		ar = readInput();
	}
	free(ar);
	printf("good bye\n");
}
