/* Anime list */
var currentSort = null;
var reverse = false;

function renderAnimeListSection(title, alist, cat, obj, settings){

    if(alist.length == 0){
	return;
    }

    var base = $('#animelist-section-template').html();
    Mustache.parse(base);
    var section = Mustache.render(base, {
	title:title,
	alist:alist,
	animelist_display_progress:settings['animelist_display_progress'],
	animelist_display_score:settings['animelist_display_score'],
	animelist_display_type:settings['animelist_display_type'],
	animelist_display_start_date:settings['animelist_display_start_date'],
	animelist_display_end_date:settings['animelist_display_end_date'],
	animelist_display_num_rewatches:settings['animelist_display_num_rewatches'],
	plus: cat != "Completed",
	edit:Boolean(user['name'])
    });

    obj.append(section);
}

function incrementAnimeEntry(entry, render){
    return function(){
	entry['num_episodes'] += 1;
	if(entry['status'] == 0){
	    entry['status'] = 2;
	    animelist[2].push(entry);
	    animelist[0].splice(animelist[0].indexOf(entry), 1);
	}
	if(entry['num_episodes'] == entry['total_episodes']){
	    animelist[entry['status']].splice(animelist[entry['status']].indexOf(entry), 1);
	    animelist[1].push(entry);
	    entry['status'] = 1;
	}
	addAnimeEntry(entry);
	render();
    }
}

function editAnimeEntry(entry, render){
    return function(){
	function editSubmit(){
	    newEntry = Object.assign({}, entry);
	    newEntry['start_date'] = $('#animelist-edit-start-date').val() ? stringToUnixUTC($('#animelist-edit-start-date').val()) : 0;
	    newEntry['end_date'] = $('#animelist-edit-end-date').val() ? stringToUnixUTC($('#animelist-edit-end-date').val()) : 0;
	    newEntry['status'] = textToStatus[$('#animelist-edit-status').val()];
	    newEntry['num_episodes'] = parseInt($('#animelist-edit-num-episodes').val());
	    newEntry['score'] = parseFloat($('#animelist-edit-score').val() ? $('#animelist-edit-score').val() : 0).toFixed(2);
	    if(newEntry['score'] == '0.00'){
		newEntry['score'] = 0;
	    }
	    newEntry['num_rewatches'] = parseInt($('#animelist-edit-num-rewatches').val());
	    newEntry['comments'] = $('#animelist-edit-comments').val();

	    addAnimeEntry(newEntry, function(){
		remove(animelist[entry['status']], entry);
		animelist[newEntry['status']].push(newEntry);

		$('#animelist-alert-invalid-input').hide('fade');
		render();
		return
	    }, function(){$('#animelist-alert-invalid-input').show('fade')});
	    
	    $('#animelist-edit-modal').modal('hide');
	}

	$('#animelist-edit-form').submit(editSubmit);

	$('#animelist-edit-save-button').off('click');
	var start_date = new Date(entry['start_date']*1000 - timeOffset);
	var end_date = new Date(entry['end_date']*1000 - timeOffset);
	
	$('#animelist-edit-start-date').val(format_date(start_date));
	$('#animelist-edit-end-date').val(format_date(end_date));
	$('#animelist-edit-status').val(statusToText[entry['status']]);
	$('#animelist-edit-num-episodes').val(entry['num_episodes']);
	$('#animelist-edit-score').val(entry['score'] != 0.00 ? entry['score'] : '');
	$('#animelist-edit-num-rewatches').val(entry['num_rewatches']);
	$('#animelist-edit-comments').val(entry['comments']);

	$('#animelist-edit-modal').modal({backdrop: 'static'});

	$('#animelist-edit-save-button').click(editSubmit);
	$('#animelist-edit-modal-title').html(entry['name']);
    }
}


function renderAnimeList(sorttype, sort=true, noReverse=false){
    if (!noReverse) {
	if (currentSort == sorttype){
	    reverse = !reverse;
	} else {
	    reverse = false;
	}
    }

    $('#animelist').empty();

    var order = [0, 2, 1, 3, 4];

    for (var index in [0, 2, 1, 3, 4]){
	var type = order[index]
	if(animelist[type].length){
	    if(sort){
		sortAnimeList(sorttype, animelist[type], currentSort == sorttype && reverse)
	    }

	    renderAnimeListSection(statusToText[type],
				   filterAnimeList(animelist[type],
						   [].concat.apply([], [animelist[0], animelist[1], animelist[2], animelist[3], animelist[4]])),
				   statusToText[type], $('#animelist'),
				   settings);
	}
    }


    currentSort = sorttype;

    $('.sort-progress').each(function(){$(this).click(function(){renderAnimeList('progress')})});
    $('.sort-score').each(function(){$(this).click(function(){renderAnimeList('score')})});
    $('.sort-type').each(function(){$(this).click(function(){renderAnimeList('type')})});
    $('.sort-title').each(function(){$(this).click(function(){renderAnimeList('title')})});
    $('.sort-start-date').each(function(){$(this).click(function(){renderAnimeList('start-date')})});
    $('.sort-end-date').each(function(){$(this).click(function(){renderAnimeList('end-date')})});
    $('.sort-num-rewatches').each(function(){$(this).click(function(){renderAnimeList('num-rewatches')})});
    
    for (var key1 in animelist){
	for (var key2 in animelist[key1]){
	    (function(key_a, key_b){
		$('.plus1-' + animelist[key_a][key_b]['anime_id']).click(incrementAnimeEntry(animelist[key_a][key_b],
											     function(){
												 renderAnimeList(sorttype, false, true);
											     }));

		var entry = animelist[key_a][key_b];
		$('.edit-' + animelist[key_a][key_b]['anime_id']).click(
		    editAnimeEntry(entry, function(){
			renderAnimeList(sorttype, true, true);
			
		    })
		);
	    })(key1,key2);
	}
    }
}

function evalPredicate(args, obj, universe=[obj], subject=obj){
    function convertDates(arg1, arg2){
	var arg1_date = false;
	var arg2_date = false;
	
	if(typeof arg1 == "string"){
	    arg1_date = true
	    arg1 = stringToUnixUTC(arg1)
	}

	if(typeof arg2 == "string"){
	    arg2_date = true
	    arg2 = stringToUnixUTC(arg2)
	}

	if(typeof arg1 == "number" && arg1_date){
	    arg1 = new Date(arg1).setHours(0,0,0,0);
	}

	if(typeof arg2 == "number" && arg2_date){
	    arg2 = new Date(arg2).setHours(0,0,0,0);
	}
	
	return [arg1, arg2]
    }

    if(args){
	switch(args[0]) {
	case 'id':
	    var out = null
	    if (typeof args[1] == 'string'){
		if (!(isNaN(parseFloat(obj[args[1]])))){
		    out = parseFloat(obj[args[1]])
		} else if (args[1][0] != '"') {
		    if(args[1] == "universe"){
			out = universe;
		    } else if(args[1] == "this"){
			out = obj;
		    } else if (args[1] == "subject"){
			out = subject;
		    } else{
			out = obj[args[1]];
		    }
		} else {
		    out = args[1].slice(1, args[1].length)
		}
	    } else {
		out = args[1];
	    }

	    if (typeof out == 'string'){
		return out.toLowerCase();
	    } else {
		return out;
	    }

	    break;
	case '->':
	    return !evalPredicate(args[1], obj, universe, subject) || evalPredicate(args[2], obj, universe, subject);
	    break;
	case '>':
	    var arg1 = evalPredicate(args[1], obj, universe, subject);
	    var arg2 = evalPredicate(args[2], obj, universe, subject);
	    var conv = convertDates(arg1, arg2);

	    return conv[0] > conv[1]
	    break;
	case '>=':
	    var arg1 = evalPredicate(args[1], obj, universe, subject);
	    var arg2 = evalPredicate(args[2], obj, universe, subject);
	    var conv = convertDates(arg1, arg2);

	    return conv[0] >= conv[1]
	    break;
	case '<':
	    var arg1 = evalPredicate(args[1], obj, universe, subject);
	    var arg2 = evalPredicate(args[2], obj, universe, subject);
	    var conv = convertDates(arg1, arg2);

	    return conv[0] < conv[1];
	    break;
	case '<=':
	    var arg1 = evalPredicate(args[1], obj, universe, subject);
	    var arg2 = evalPredicate(args[2], obj, universe, subject);
	    var conv = convertDates(arg1, arg2);

	    return conv[0] <= conv[1];
	    break;
	case 'and':
	    return evalPredicate(args[1], obj, universe, subject) && evalPredicate(args[2], obj, universe, subject);
	    break;
	case 'or':
	    return evalPredicate(args[1], obj, universe, subject) || evalPredicate(args[2], obj, universe, subject);
	    break;
	case 'not':
	    return !evalPredicate(args[1], obj, universe, subject);
	    break;
	case '=':
	    var arg1 = evalPredicate(args[1], obj, universe, subject);
	    var arg2 = evalPredicate(args[2], obj, universe, subject);

	    var conv = convertDates(arg1, arg2);

	    return conv[0] == conv[1];
	    break;
	case '!=':
	    var arg1 = evalPredicate(args[1], obj, universe, subject);
	    var arg2 = evalPredicate(args[2], obj, universe, subject);
	    var conv = convertDates(arg1, arg2);

	    return conv[0] != conv[1];
	    break;
	case '+':
	    var arg1 = evalPredicate(args[1], obj, universe, subject);
	    var arg2 = evalPredicate(args[2], obj, universe, subject);
	    var conv = convertDates(arg1, arg2);

	    return conv[0] + conv[1];
	    break;
	case '-':
	    var arg1 = evalPredicate(args[1], obj, universe, subject);
	    var arg2 = evalPredicate(args[2], obj, universe, subject);
	    var conv = convertDates(arg1, arg2);

	    return conv[0] - conv[1];
	    break;
	case '/':
	    var arg1 = evalPredicate(args[1], obj, universe, subject);
	    var arg2 = evalPredicate(args[2], obj, universe, subject);
	    var conv = convertDates(arg1, arg2);

	    return conv[0] / conv[1];
	    break;
	case '*':
	    var arg1 = evalPredicate(args[1], obj, universe, subject);
	    var arg2 = evalPredicate(args[2], obj, universe, subject);
	    var conv = convertDates(arg1, arg2);

	    return conv[0] * conv[1];
	    break;
	case 'in':
	    var arg1 = evalPredicate(args[1], obj, universe, subject);
	    var arg2 = evalPredicate(args[2], obj, universe, subject);
	    return arg2.indexOf(arg1) != -1;
	    break;
	case '!in':
	    var arg1 = evalPredicate(args[1], obj, universe, subject);
	    var arg2 = evalPredicate(args[2], obj, universe, subject);
	    return arg2.indexOf(arg1) == -1;
	    break;
	case 'avg':
	    var t = 0;
	    var c = 0;
	    arg2 = evalPredicate(args[2], obj, universe, subject);
	    for (var i in arg2){
		c++;
		t += evalPredicate(args[1], arg2[i], universe, subject);
	    }

	    return t/c;
	    break;
	case 'sum':
	    var t = 0;
	    arg2 = evalPredicate(args[2], obj, universe, subject);
	    for (var i in arg2){
		t += evalPredicate(args[1], arg2[i], universe, subject);
	    }

	    return t;
	    break;
	case 'max':
	    var max = 0;
	    arg2 = evalPredicate(args[2], obj, universe, subject);
	    for (var i in arg2){
		var v = evalPredicate(args[1], arg2[i], universe, subject);
		if(v > max){
		    max = v;
		}
	    }
	    return max;
	    break;
	case 'min':
	    var min = Infinity;
	    arg2 = evalPredicate(args[2], obj, universe, subject);
	    for (var i in arg2){
		var v = evalPredicate(args[1], arg2[i], universe, subject);
		if(v < min){
		    min = v;
		}
	    }
	    return min;
	    break;
	case 'filter':
	    var newUniverse = []
	    arg2 = evalPredicate(args[2], obj, universe, subject);
	    for (var i in arg2){
		if(evalPredicate(args[1], arg2[i], universe, subject)){
		    newUniverse.push(arg2[i]);
		}
	    }
	    return newUniverse;
	    break;
	case 'sort':
	    arg2 = evalPredicate(args[2], obj, universe, subject);
	    var sorted = arg2.concat().sort(function(a, b){
		return evalPredicate(args[1], b, universe, subject) - evalPredicate(args[1], a, universe, subject);
	    });
	    return sorted;
	    break;
	case 'fraction':
	    arg1 = evalPredicate(args[1], obj, universe, subject);
	    arg2 = evalPredicate(args[2], obj, universe, subject);
	    return arg2.slice(0, Math.round(arg2.length * arg1));
	    break;
	case 'exists':
	    arg2 = evalPredicate(args[2], obj, universe, subject);
	    for (var i in arg2){
		if(evalPredicate(args[1], arg2[i], universe, subject)){
		    return true;
		}
	    }
	    return false;
	    break;
	case 'forall':
	    arg2 = evalPredicate(args[2], obj, universe, subject);
	    for (var i in arg2){
		if(!(evalPredicate(args[1], arg2[i], universe, subject))){
		    return false;
		}
	    }
	    return true;
	    break;
	case 'val':
	    arg1 = evalPredicate(args[1], obj, universe, subject);
	    arg2 = evalPredicate(args[2], obj, universe, subject);
	    var meme = arg1[arg2];
	    return meme;
	}
    }

}

function parseAtom(str){
    if (!isNaN(parseFloat(str))){
	return parseFloat(str)
    } else if(str == 'true' || str == 'false') {
	return str == 'true'
    } else {
	return str
    }
}

function parsePredicate(str){
    var inPredicate = false
    var out = []
    var curPart = ''
    var c = 0
    function pushPart(){
	if (curPart.length != 0){
	    out.push(curPart.trim())
	    curPart = ''
	}
    }
    while (c < str.length){
	//TODO doesn't work yet
	if (str[c] == '{'){
	    var depth = 1;
	    var curTerm = ''
	    while(true){
		c++;
		if (str[c] == '{'){
		    depth++;
		} else if (str[c] == '}'){
		    depth--;
		}

		if (depth == 0){
		    out.push(parsePredicate(curTerm));
		    break
		}
		curTerm = curTerm.concat(str[c])
	    }
	} else if (str[c] == ' '){
	    pushPart();
	} else if (str[c] == '"'){
	    pushPart();
	    curPart = '"'
	    while(true){
		c++;
		if(str[c] == '"'){
		    break;
		} else if (c >= str.length){
		    return 'false'
		}
		curPart = curPart.concat(str[c]);
	    }
	    pushPart();
	} else {
	    curPart = curPart.concat(str[c])
	}
	c++;
    }

    pushPart();

    if (out.length == 3){
	return out
    } else {
	return 'false' 
    }
}

function preparePredicate(obj, out){
    if(typeof obj == "string"){
	return ['id', parseAtom(obj), null];
    }

    try{
	return [obj[1], preparePredicate(obj[0]), preparePredicate(obj[2])];
    }catch(e){
	return []
    }
}

function processAnimeListSearchQuery(query){
    function pushTerm(){
	if(curTerm != ''){
	    terms.push(curTerm.toLowerCase())
	    curTerm = ''
	}
    }

    var terms = []
    var predicates = []
    var curTerm = ''
    var c = 0

    if (!((query.match(/{/g) || []).length == (query.match(/}/g) || []).length) || // Number of brackets must be equal
	(query.indexOf('{') != -1 && query.indexOf('}') < query.indexOf('{'))){ // } can't occur before first {
	return [terms, predicates]
    } else {
	while(c < query.length){
	    if (query[c] == '{'){
		pushTerm();
		var depth = 1;
		var curPredicate = ''
		while(true){
		    c++;
		    if (query[c] == '{'){
			depth++;
		    } else if (query[c] == '}'){
			depth--;
		    }

		    if (depth == 0){
			predicates.push(preparePredicate(parsePredicate(curPredicate)));
			break
		    }
		    curPredicate = curPredicate.concat(query[c])
		}
	    } else if (query[c] == ' '){
		pushTerm();
	    } else {
		curTerm = curTerm.concat(query[c])
	    }
	    c++;
	}
    }
    pushTerm();
    return [terms, predicates]
}

function filterAnimeList(list, universe=list){
    var query = $('#animelist-search').val().toLowerCase().replace(/\s+/g,' ').trim();

    var tmp = processAnimeListSearchQuery(query)
    var terms = tmp[0]
    var predicates = tmp[1]

    var accepted = []

    endloop:
    for (var anime in list){
	for (var term in terms){
	    if(list[anime].name.toLowerCase().indexOf(terms[term]) == -1){
		continue endloop
	    }
	}
	for (var p in predicates){
	    if(!(evalPredicate(predicates[p], list[anime], universe))){
		continue endloop
	    }
	}
	accepted.push(list[anime])
    }

    return accepted;
}

function sortAnimeList(type, animelist, reverse){
    function compareScore(a, b){
	if(a['score'] == b['score']){
	    return compareTitle(a, b, doReverse=false);
	}

	if(reverse){
	    [a, b] = [b, a];
	}
	return b['score'] - a['score'];
    }
    function compareProgress(a, b){
	if(a['num_episodes'] == b['num_episodes']){
	    return compareTitle(a, b, doReverse=false);
	}

	if(reverse){
	    [a, b] = [b, a];
	}
	return (b['num_episodes']/b['total_episodes']) - (a['num_episodes']/a['total_episodes']);
    }
    function compareTitle(a, b, doReverse=reverse){
	if(doReverse){
	    [a, b] = [b, a];
	}
	return a['name'].localeCompare(b['name']);
    }
    function compareType(a, b){
	if(reverse){
	    [a, b] = [b, a];
	}
	return a['type'].localeCompare(b['type']);
    }
    function compareStartDate(a, b){
	if(a['start_date'] == b['start_date']){
	    return compareTitle(a, b, doReverse=false);
	}
	if(reverse){
	    [a, b] = [b, a];
	}
	return b['start_date'] - a['start_date'];
    }
    function compareEndDate(a, b){
	if(a['end_date'] == b['end_date']){
	    return compareTitle(a, b, doReverse=false);
	}
	if(reverse){
	    [a, b] = [b, a];
	}
	return b['end_date'] - a['end_date'];
    }
    function compareNumRewatches(a, b){
	if(a['num_rewatches'] == b['num_rewatches']){
	    return compareTitle(a, b, doReverse=false);
	}
	if(reverse){
	    [a, b] = [b, a];
	}
	return b['num_rewatches'] - a['num_rewatches'];
    }

    if (type == 'score'){
	animelist.stableSort(compareScore);
    } else if (type == 'progress'){
	animelist.stableSort(compareProgress);
    } else if (type == 'title'){
	animelist.stableSort(compareTitle)
    }  else if (type == 'type'){
	animelist.stableSort(compareType)
    } else if (type == 'start-date'){
	animelist.stableSort(compareStartDate);
    } else if (type == 'end-date'){
	animelist.stableSort(compareEndDate);
    } else if (type == 'num-rewatches') {
	animelist.stableSort(compareNumRewatches);
    }
}

function setupAnimeListPage(sorttype){
    animelist = {0:[], 1:[], 2:[], 3:[], 4:[]}
    getAnimeList(username, function(al){
	for (var item in al['data']){
	    if (url_parts.length < 6 || al['data'][item]['anime_id'] == parseInt(url_parts[5])){
		animelist[al['data'][item]['status']].push(al['data'][item]);
	    }
	}


	for (var key1 in animelist){
	    for (var key2 in animelist[key1]){
		entry = animelist[key1][key2];
		var start_date = new Date(entry['start_date']*1000 - timeOffset);
		var end_date = new Date(entry['end_date']*1000 - timeOffset);
		animelist[key1][key2]['readable_start_date'] = format_date(start_date);
		animelist[key1][key2]['readable_end_date'] = format_date(end_date);

		animelist[key1][key2]['score'] = parseFloat(animelist[key1][key2]['score']).toFixed(2);
		if(animelist[key1][key2]['score'] == "0.00"){
		    animelist[key1][key2]['score'] = 0;
		}
	    }
	}

	animelist = Object.assign({}, animelist);

	getSettings(username, function(s){
	    settings=s['data']
	    renderAnimeList(sorttype);
	});
	$('#animelist-edit-start-date').datepicker(datepickerSettings);
	$('#animelist-edit-end-date').datepicker(datepickerSettings);
	$('#alert-invalid-input-close-button').click(function(){
	    $('#animelist-alert-invalid-input').hide('fade');
	});
    }, function(error){
	$('#animelist').html("This user's anime list is private.");
    });
}		


/* API */
function login(data, successCallback, errorCallback){
    $.ajax({
	type: "POST",
	headers: {
	    'Content-type': publicAPIVer
	},
	url: "/login/",
	data: data,
	success: successCallback,
	error:errorCallback
    });
}

function logout(e){
    e.preventDefault();

    $.ajax({
	type: "POST",
	url: "/logout/",
	success: function(data)
	{
	    user = {'id':null, 'name':null, 'dname':null}
	}
    });
    location.reload();
}

function addAnimeEntries(entries, username, successCallback, errorCallback){
    $.ajax({
	type: "PUT",
	url: "/animelist/" + username,
	data: entries,
	headers: {
	    'Content-type': publicAPIVer
	},
	success: successCallback,
	error: errorCallback
    });
}

function addAnimeEntry(data, successCallback, errorCallback){
    $.ajax({
	type: "PUT",
	url: "/animelist/" + data['username'] + '/' + data['anime_id'],
	data: JSON.stringify({'data':{
	    'username': data['username'],
	    'score': data['score'],
	    'start_date': data['start_date'],
	    'end_date': data['end_date'],
	    'num_episodes': data['num_episodes'],
	    'num_rewatches': data['num_rewatches'],
	    'status': data['status'],
	    'comments': data['comments']
	}}),
	headers: {
	    'Content-type': publicAPIVer
	},
	success: successCallback,
	error: errorCallback
    });
}
function setSettings(username, settings, successCallback, errorCallback){
    $.ajax({
	type: "PUT",
	url: "/user/" + username + "/settings",
	headers: {
	    'Content-type': publicAPIVer
	},
	data: settings,
	success: successCallback,
	error:errorCallback
    });
}


function getSettings(username, successCallback, errorCallback){
    $.ajax({
	type: "GET",
	url: "/user/" + username + "/settings",
	headers: {
	    Accept: publicAPIVer
	},
	success: successCallback,
	error:errorCallback
    });
}

function getAnimeEntry(username, anime_id, successCallback, errorCallback){
    $.ajax({
	type: "GET",
	url: "/animelist/" + username + "/" + anime_id,
	headers: {
	    Accept: publicAPIVer
	},
	success: successCallback,
	error: errorCallback
    });
}

function getAnimeList(username, successCallback, errorCallback){
    $.ajax({
	type: "GET",
	url: "/animelist/" + username,
	headers: {
	    Accept: publicAPIVer
	},
	success: successCallback,
	error: errorCallback
    });
}

/* util */
function slugify(text)
{
    return text.toString().toLowerCase()
	.replace(/\s+/g, '-')           // Replace spaces with -
	.replace(/[^\w\-]+/g, '')       // Remove all non-word chars
	.replace(/\-\-+/g, '-')         // Replace multiple - with single -
	.replace(/^-+/, '')             // Trim - from start of text
	.replace(/-+$/, '');            // Trim - from end of text
}

Object.defineProperty(Array.prototype, 'stableSort', {
    configurable: true,
    writable: true,
    value: function stableSort (compareFunction) {
	'use strict'

	var length = this.length;
	var entries = Array(length);
	var index;

	// wrap values with initial indices
	for (index = 0; index < length; index++) {
	    entries[index] = [index, this[index]];
	}

	// sort with fallback based on initial indices
	entries.sort(function (a, b) {
	    var comparison = Number(this(a[1], b[1]));
	    return comparison || a[0] - b[0];
	}.bind(compareFunction));

	// re-map original array to stable sorted values
	for (index = 0; index < length; index++) {
	    this[index] = entries[index][1];
	}
	
	return this;
    }
})

var statusToText = {0: 'Plan To Watch',
		    1: 'Completed',
		    2: 'Watching',
		    3: 'On Hold',
		    4: 'Dropped'};

var textToStatus = {};
for (var key in statusToText){
    textToStatus[statusToText[key]] = parseInt(key);
}

function format_date(date){
    if(date.getTime() == 0 - timeOffset){
	return '';
    }

    return ("0" + date.getDate()).slice(-2) + "/" +
	("0" + (date.getMonth() + 1)).slice(-2) + "/" +
	date.getFullYear();
}

function stringToUnixUTC(dateStr, dateFormat="DD/MM/YYYY") {
    if(!dateStr){
	return 0;
    } else if (typeof dateStr != "string") {
	return dateStr
    } else {
	var parsed = moment(dateStr, dateFormat, true)
	return parsed.isValid() ? parsed.unix() : 0
    }
}

function remove(array, element) {
    const index = array.indexOf(element);
    array.splice(index, 1);
}

function slugify(text) {
    return text.toString().toLowerCase()
	.replace(/\s+/g, '-')           // Replace spaces with -
	.replace(/[^\w\-]+/g, '')       // Remove all non-word chars
	.replace(/\-\-+/g, '-')         // Replace multiple - with single -
	.replace(/^-+/, '')             // Trim - from start of text
	.replace(/-+$/, '');            // Trim - from end of text
}

/* instant search */
function navsearchRenderResult(res){
    $('#results div').remove();
    results = JSON.parse(res)['response'];
    if (!results){return;}

    var base = $('#iresult').html();
    Mustache.parse(base);

    for (result in results['docs']){
	var entry = results['docs'][result];
	var url = '/anime/'+entry['id']+'/'+slugify(entry['title']);
	var title = entry['title'];
	if (!entry.start_date) {
	    var year = "Unknown";
	}else{
	    var year = entry.start_date.slice(0,4);
	}
	if (!entry.flags || entry.flags.search("missing_start_month") == -1){
	    var season = get_season(entry.start_date);
	} else {
	    var season = "Unknown";
	}
	var row = Mustache.render(base, {
	    url:url,
	    status_icon:backend['icons']['status'][entry.status],
	    type_icon:backend['icons']['a_type'][entry.type],
	    season:season,
	    season_icon:backend['icons']['season'][season],
	    status:entry.status,
	    title:entry.title,
	    episodes:entry.episodes,
	    type:entry.type,
	    year:year,
	    image:"/static/img/placeholder.jpg"
	});
	
	$('#results').append(row);
    }
}


var timer;
function navsearchDisplayResults(res){
    $('.results').empty();
    results = JSON.parse(res)['response'];
    if (!results){
	return;
    }

    if(results['numFound'] == 0){
	$('.results').append('<div class="nsearch-result my-2">No results.</div>');
    }

    var base = $('#nsresult').html();
    Mustache.parse(base);

    for (result in results['docs']){
	var entry = results['docs'][result]
	var title = entry['title'];
	var url = '/anime/'+entry['id']+'/'+slugify(entry['title']);
	var row = Mustache.render(base, {
	    url:url,
	    title:title,
	    image:"http://via.placeholder.com/40x40",
	    info: [{'icon': backend['icons']['a_type'][String(entry['type'])],
		    'text': '8.4 '},
		   {'icon': backend['icons']['status'][String(entry['status'])]},
		   {'icon': backend['icons']['season'][String(entry['season']).split(' ')[0]],
		    'text': entry['start_date'].split('-')[0]}]
	});
	$('.results').append(row);
    }
}

function search(){
    var url = backend['solr_url']+'/select?wt=json&q=title:"'+$('#qbox')[0].value+'"';
    $.get(url, '', navsearchDisplayResults);
}

$(document).on('keyup', '#qbox', function(){
    timer && clearTimeout(timer);
    timer = setTimeout(search, 50);
});
$(document).on('click', '#qbox', function(){
    timer && clearTimeout(timer);
    timer = setTimeout(search, 10);
});

var datepickerSettings = {
    format: 'dd/mm/yyyy',
    autoclose: true,
    disableTouchKeyboard: true,
    endDate: new Date()
};


/* nav login */
function navlogin(e){
    e.preventDefault();
    var loginInformation = $('#navlogin').serializeArray()

    login(JSON.stringify({'data':{'account':loginInformation[0]['value'],
				  'password':loginInformation[1]['value']}}),
	  function(out){
	      user = out;
	      if(user['user_id']){
		  location.reload();
	      }
	  }), function(){}; // TODO raise an error or something?
}

/* Always */
$(document).ready(function() {
    $("#navlogin").submit(navlogin);
    $("#navlogout").submit(logout);

    timeOffset = new Date().getTimezoneOffset()*60*1000;

    publicAPIVer = "application/vnd.toshokan.toshokan.public-v1+json";

    settings = {}

    url_parts = []
    tmp_parts = window.location.href.split('/')
    for (var part in tmp_parts){
	url_parts.push(tmp_parts[part].split('?')[0].replace('#',''));
    }

    // Find our user name
    if(url_parts[3] == 'animelist'){
	username = url_parts[4].split('?')[0];
    } else if(url_parts[3] == 'user'){
	username = window.location.href.split('user/')[1].split('/')[0];
    }else{
	username = '';
    }

    getSettings(username, function(s){
	settings=s['data'];
	if(url_parts[3] == 'animelist'){
	    var timer;
	    $(document).on('keyup', '#animelist-search', function(){
		timer && clearTimeout(timer);
		timer = setTimeout(function(){
		    reverse = !reverse; //Compensate for reversing done by renderAnimeList
		    renderAnimeList(currentSort);
		}, 200);
	    });

	    setupAnimeListPage('title');
	}else if(url_parts[3] == 'user' && url_parts[5] == 'settings'){
	    setupSettingsPage();
	} else if(url_parts[3] == 'user' && url_parts[5] == 'dashboard'){
	    $(document).on('keyup', '#animelist-search', function(){
		timer && clearTimeout(timer);
		timer = setTimeout(function(){
		    reverse = !reverse; //Compensate for reversing
		    renderDashboardEntries(null, animelist[0].concat(animelist[2]), 'anime');
		}, 200);
	    });
	    setupDashboardPage();
	} else if(url_parts[3] == 'user' && url_parts[5] == 'import'){
	    setupImportPage();
	}
    });
    //FIXME what if getSettings errors?
});

/* Settings */
function setupSettingsPage(){
    $('#animelist-private').prop('checked', settings['animelist_private']);
    $('#animelist-display-progress').prop('checked', settings['animelist_display_progress']);
    $('#animelist-display-score').prop('checked', settings['animelist_display_score']);
    $('#animelist-display-type').prop('checked', settings['animelist_display_type']);
    $('#animelist-display-start-date').prop('checked', settings['animelist_display_start_date']);
    $('#animelist-display-end-date').prop('checked', settings['animelist_display_end_date']);
    $('#animelist-display-num-rewatches').prop('checked', settings['animelist_display_num_rewatches']);

    $('#settings-animelist-display-save-button').click(function(){
	settings['animelist_private'] = $('#animelist-private').prop('checked');
	settings['animelist_display_progress'] = $('#animelist-display-progress').prop('checked');
	settings['animelist_display_score'] = $('#animelist-display-score').prop('checked');
	settings['animelist_display_type'] = $('#animelist-display-type').prop('checked');
	settings['animelist_display_start_date'] = $('#animelist-display-start-date').prop('checked');
	settings['animelist_display_end_date'] = $('#animelist-display-end-date').prop('checked');
	settings['animelist_display_num_rewatches'] = $('#animelist-display-num-rewatches').prop('checked');

	//TODO implement feedback
	setSettings(username, JSON.stringify({'data': settings}));
    });
}

function renderDashboardEntries(sorttype, list, kind, sort=true, noReverse=false){
    if(sorttype == null){
	sorttype = currentSort;
    }

    if (!noReverse) {
	if (currentSort == sorttype){
	    reverse = !reverse;
	} else {
	    reverse = false;
	}
    }


    if(kind == 'anime'){
	sortAnimeList(sorttype, list, currentSort == sorttype && reverse);
	currentSort = sorttype;

	filteredList = filterAnimeList(list);

	for (var a in filteredList){
	    entry = filteredList[a]
	    entry['progress'] = entry['num_episodes']
	    entry['max_progress'] = entry['total_episodes']
	    entry['id'] = entry['anime_id']
	    entry['kind'] = 'anime'
	}

	$('#dashboard-list-'+kind).empty()

	var base = $('#dashboard-list-template').html()
	Mustache.parse(base);
	var section = Mustache.render(base, {'list': filteredList});
	$('#dashboard-list-'+kind).append(section)

	for (var e in filteredList){
	    var entry = filteredList[e];
	    $('.edit-'+entry['kind']+'-'+entry['id']).click(
		editAnimeEntry(entry,
			       function(){
				   renderDashboardEntries(currentSort, list, kind, sort, noReverse=true);
			       }));

	    $('.plus1-'+entry['anime_id']).click(incrementAnimeEntry(entry, function(){
		renderDashboardEntries(currentSort, list, kind, sort, noReverse=true);
	    }));
	}
	$('.sort-progress').each(function(){$(this).click(function(){renderDashboardEntries('progress', list, 'anime')})});
	$('.sort-title').each(function(){$(this).click(function(){renderDashboardEntries('title', list, 'anime')})});


    }
}

function setupDashboardPage(){
    // TODO error handling

    animelist = {0:[], 1:[], 2:[], 3:[], 4:[]}
    getAnimeList(username, function(al){
	for (var item in al['data']){
	    animelist[al['data'][item]['status']].push(al['data'][item]);
	}

	currentSort = 'progress';

	var feed_template = $('#dashboard-feed-update-template').html();
	Mustache.parse(feed_template)
	var test_item = Mustache.render(feed_template, {
	    type: 'meme',
	    image: 'http://via.placeholder.com/90x90',
	    text: '<b>Test item</b> Someone did a thing.<br><i>Text</i> or <u>something</u>.'
	});

	for (var i = 0; i < 10; i++){
	    $('#news-content').append(test_item);
	}

	renderDashboardEntries('progress', animelist[0].concat(animelist[2]), 'anime')
    });
}

function setupImportPage(){
    var handled = 0;
    function importAnimeEntry(anime, out, length){
	var name = anime.getElementsByTagName("series_title")[0].firstChild.nodeValue
	var url = encodeURI(backend['solr_url']+'/select?wt=json&q=title:"'+name+'"')

	$.ajax({
	    type: "GET",
	    url: url,
	    success: function(res){
		var parsed_res = JSON.parse(res)['response']
		if (parsed_res['numFound'] != 0){
		    var obj = parsed_res['docs'][0]
		    //TODO this section might not be correct!
		    //TODO might as well just use statustotext for this lul
		    switch(anime.getElementsByTagName("my_status")[0].firstChild.nodeValue){
		    case "Completed":
			var status = 1;
			break;
		    case "Plan To Watch":
			var status = 0;
			break;
		    case "Watching":
			var status = 2;
			break;
		    case "On Hold":
			var status = 3;
			break;
		    case "Dropped":
			var status = 4;
			break;
		    case true:
			var status = -1;
			break;
		    }
		    out.push({
			'anime_id': obj['id'],
			'score': parseInt(anime.getElementsByTagName("my_score")[0].firstChild.nodeValue),
			// FIXME might not deal with timezones right
			'start_date': (anime.getElementsByTagName("my_start_date")[0].firstChild.nodeValue == "0000-00-00" ?
				       0 : stringToUnixUTC(anime.getElementsByTagName("my_start_date")[0].firstChild.nodeValue,
							   dateFormat="YYYY-MM-DD")),
			'end_date': (anime.getElementsByTagName("my_finish_date")[0].firstChild.nodeValue == "0000-00-00" ?
				     0 : stringToUnixUTC(anime.getElementsByTagName("my_finish_date")[0].firstChild.nodeValue,
							 dateFormat="YYYY-MM-DD")),
			'num_episodes': parseInt(anime.getElementsByTagName("my_watched_episodes")[0].firstChild.nodeValue),
			'num_rewatches': parseInt(anime.getElementsByTagName("my_times_watched")[0].firstChild.nodeValue),
			'comments': anime.getElementsByTagName("my_comments")[0].firstChild.nodeValue,
			'status': status,
		    });
		}
	    },
	    complete: function(res){
		handled++;
		if(length == handled){
		    addAnimeEntries(JSON.stringify({'data': {'entries': out, 'import':true}}), username);
		}
	    }});
    }

    animelist = ''
    $('#animelist-import').change(function(){
	var f = this.files[0];
	if(!f.type.match("text/xml")){
	    return
	}
	var reader = new FileReader();

	// Closure to capture the file information.
	reader.onload = (function(file) {
	    return function(e) {
		// Render thumbnail.
		animelist = atob(e.target.result.split(',')[1]);
	    };
	})(f);

	// Read in the image file as a data URL.
	reader.readAsDataURL(f);
    });

    $('#import-animelist-button').click(function(){
	var out = []
	var parser = new DOMParser();
	var parsed_animelist = parser.parseFromString(animelist, "text/xml").getElementsByTagName("anime");
	var length = parsed_animelist.length
	for (var i in parsed_animelist){
	    if(i == 'length'){
		break
	    }
	    var anime = parsed_animelist[i]
	    importAnimeEntry(anime, out, length);
	}
    });
}
