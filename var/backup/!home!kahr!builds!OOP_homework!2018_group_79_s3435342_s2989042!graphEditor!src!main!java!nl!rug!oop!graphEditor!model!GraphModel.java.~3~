package nl.rug.oop.graphEditor.model;

import javax.swing.undo.UndoManager;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Observable;
import java.util.Observer;

public class GraphModel extends Observable implements Observer {
    private ArrayList<GraphVertex> vertices;
    private ArrayList<GraphEdge> edges;
    private UndoManager undoManager;
    private String filename;
    private boolean additionMode, changed;

    public GraphModel(String filename, boolean var) {
        this.filename = filename;
        initializeModel();
        setChanged();
        notifyObservers();
    }

    public GraphModel(String filename) {
        this.filename = filename;
        load(filename);
    }

    public GraphVertex getSelected() {
        for (GraphVertex v : vertices) {
            if (v.isSelected()) {
                return v;
            }
        }
        return null;
    }

    public String getFilename() {
        return filename;
    }

    public ArrayList<GraphVertex> getVertices() {
        return vertices;
    }

    public ArrayList<GraphEdge> getEdges() {
        return edges;
    }

    public void addVertex(GraphVertex v) {
        vertices.add(v);
        setChanged();
        notifyObservers();
    }

    public void addEdge(GraphEdge e) {
        edges.add(e);
        setChanged();
        notifyObservers();
    }

    public void removeVertex(GraphVertex v) {
        vertices.remove(v);
        Iterator<GraphEdge> edgeIterator = edges.iterator();
        while (edgeIterator.hasNext()) {
            GraphEdge edge = edgeIterator.next();
            if (edge.getVertices().contains(v)) {
                edgeIterator.remove();
            }
        }
        setChanged();
        notifyObservers();
    }

    public void removeEdge(GraphEdge e) {
        edges.remove(e);
        setChanged();
        notifyObservers();
    }

    public void printVertices() {
        for (GraphVertex v : this.vertices) {
            System.out.println(String.format("%d %d %d %d %s", v.getX(), v.getY(), v.getHeight(), v.getWidth(), v.getName()));
        }
    }

    public void printEdges() {
        for (GraphEdge e : this.edges) {
            System.out.println(String.format("%d %d", vertices.indexOf(e.getVertices().get(0)), vertices.indexOf(e.getVertices().get(1))));
        }
    }

    public boolean isAdditionMode() {
        return additionMode;
    }

    public void setAdditionMode(boolean additionMode) {
        this.additionMode = additionMode;
        setChanged();
        notifyObservers();
    }

    private void initializeModel() {
        vertices = new ArrayList<>();
        edges = new ArrayList<>();
        additionMode = false;
        changed = false;
    }

    public void save(String filename) {
        ArrayList<String> lines = new ArrayList<>();
        lines.add(String.format("%d %d", vertices.size(), edges.size()));

        for (GraphVertex v : vertices) {
            lines.add(String.format("%d %d %d %s %s", v.getX(), v.getY(), v.getHeight(), v.getWidth(), v.getName()));
        }

        for (GraphEdge e : edges) {
            ArrayList<GraphVertex> edgeVertices = e.getVertices();
            lines.add(String.format("%d %d", vertices.indexOf(edgeVertices.get(0)), vertices.indexOf(edgeVertices.get(1))));
        }

        Path file = Paths.get(filename);
        try {
            Files.write(file, lines, Charset.forName("UTF-8"));
        } catch (IOException e) {
            System.err.println("An unexpected error occurred!");
            e.printStackTrace();
        }
        changed = false;
    }

    public void load(String filename) {
        try {
            FileReader reader = new FileReader(filename);
            BufferedReader buffReader = new BufferedReader(reader);
            String line = buffReader.readLine();
            initializeModel();
            String[] tokens = line.split(" ");
            int numVertices = Integer.parseInt(tokens[0]);
            int numEdges = Integer.parseInt(tokens[1]);

            for (int i = 0; i < numVertices; i++) {
                String localLine = buffReader.readLine();
                String[] localTokens = localLine.split(" ");
                addVertex(new GraphVertex(this, Integer.parseInt(localTokens[0]),
                        Integer.parseInt(localTokens[1]),
                        Integer.parseInt(localTokens[2]),
                        Integer.parseInt(localTokens[3]),
                        localTokens[4]));
            }

            for (int i = 0; i < numEdges; i++) {
                String localLine = buffReader.readLine();
                String[] localTokens = localLine.split(" ");
                GraphVertex vertice1 = vertices.get(Integer.parseInt(localTokens[0]));
                GraphVertex vertice2 = vertices.get(Integer.parseInt(localTokens[1]));
                addEdge(new GraphEdge(this, vertice1, vertice2));
            }
        } catch (IOException e) {
            System.err.println("An unexpected error occurred!");
            e.printStackTrace();
        }
        setChanged();
        notifyObservers();
    }

    public boolean isChanged() {
        return changed;
    }

    @Override
    public void update(Observable observed, Object message) {
        changed = true;
        setChanged();
        notifyObservers();
    }
}