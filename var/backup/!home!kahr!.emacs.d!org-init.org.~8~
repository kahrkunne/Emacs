* Configuration
This is Kahr Kunne's Emacs configuration, using literate programming with org-babel.
** Personal information
General information stuff like full name and email address.
#+NAME: Personal information
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq user-full-name "Kahr Kunne"
        user-mail-address "kahr.kunne@gmail.com")
#+END_SRC
** Emacs settings and built-in packages
*** Backups
Store all backups in ~/.emacs.d/backups, instead of clutting the current directory.
#+NAME: Backups directory
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC
Save often, because disk space is cheap, but data loss isn't.
#+NAME: Backups
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq delete-old-versions           -1
        version-control                t
        vc-make-backup-files           t
        auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list" t)))
#+END_SRC
*** History
Save minibuffer, kill-ring, search-ring and regexp-search-ring histories, because disk space is cheap
#+NAME: savehist-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
  (setq history-length t
        history-delete-duplicates t
        savehist-save-minibuffer-history 1
        savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
#+END_SRC
*** Forbidden commands
Enable default-forbidden commands here.
#+NAME: forbidden
#+BEGIN_SRC emacs-lisp :tangle yes
  (put 'upcase-region 'disabled nil)
#+END_SRC
*** ERC
#+NAME: erc
#+BEGIN_SRC emacs-lisp :tangle yes
#+END_SRC
*** Term
Term mode fixes so that I can use normal C-c
#+NAME: term-fixes
#+BEGIN_SRC emacs-lisp :tangle yes
  (eval-after-load "term"
    '(progn (term-set-escape-char ?\C-q)
            (define-key term-raw-map (kbd "C-c") nil)))
  (eval-after-load "term"
    '(define-key term-raw-map (kbd "C-c o") (lambda ()(interactive)(term-send-raw-string "\C-c"))))
#+END_SRC
*** Eshell
Code related to eshell
#+NAME: eshell
#+BEGIN_SRC emacs-lisp :tangle yes
    (defun eshell/cat-with-syntax-highlight (filename)
      "Like cat(1) but with syntax highlighting."
      (let ((existing-buffer (get-file-buffer filename))
            (buffer (find-file-noselect filename)))
        (eshell-print
         (with-current-buffer buffer
           (if (fboundp 'font-lock-ensure)
               (font-lock-ensure)
             (with-no-warnings
               (font-lock-fontify-buffer)))
           (buffer-string)))
        (unless existing-buffer
          (kill-buffer buffer))
        nil))

  (defun eshell/imgcat (&rest args)
    "Display image(s)."
    (let ((elems (eshell-flatten-list args))
          (minibuffer-message-timeout 0))
      (if (not (file-exists-p (expand-file-name (car elems))))
          nil
        (while elems
          (call-process-shell-command (concat "convert -resize "
                                              (number-to-string (* 0.75 (window-pixel-height)))
                                              "x"
                                              (number-to-string (* 0.75 (window-pixel-width)))
                                              " "
                                              (car elems)
                                              " "
                                              "/tmp/"
                                              (car elems)))
          (setcar elems (concat "/tmp/" (car elems)))
          (eshell-printn
           (propertize " " 'display (create-image (expand-file-name (car elems)))))
          (delete-file (car elems))
          (setq elems (cdr elems)))))) 

    (defun eshell/bettercat (filename &rest args)
      (if (equal (substring (mailcap-extension-to-mime (file-name-extension filename)) 0 5)
                 "image")
          (eshell/imgcat (cons filename args))
        (eshell/cat-with-syntax-highlight filename))) 

    (advice-add 'eshell/cat :override #'eshell/bettercat) 

  (add-hook 'eshell-mode-hook
    (lambda () 
      (define-key eshell-mode-map (kbd "<tab>")
        (lambda () (interactive) (pcomplete-std-complete))))) 
#+END_SRC

*** Dired
#+NAME: dired
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq dired-recursive-copies 'always
        dired-recursive-deletes 'always
        dired-dwim-target t
        dired-listing-switches "-alh")

  (dired-async-mode 1)
#+END_SRC
*** Other
Allow dired to delete directories
#+NAME: dired-directories
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; allow dired to delete or copy dir
  (setq dired-recursive-copies (quote always)) ; “always” means no asking
  (setq dired-recursive-deletes (quote top)) ; “top” means ask once
#+END_SRC
Show parens
#+NAME: show-paren
#+BEGIN_SRC emacs-lisp :tangle yes
  (show-paren-mode 1)
  (setq show-paren-delay 0)
#+END_SRC

Enable line numbers globally.
#+NAME: linum
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'prog-mode-hook 'nlinum-mode)
#+END_SRC
Turn off the bell
#+NAME: bell
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq ring-bell-function 'ignore)
#+END_SRC
Turn yes/no prompts into y/n prompts
#+NAME: y-or-n-p
#+BEGIN_SRC emacs-lisp :tangle yes
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
Use python 3
#+NAME: py3
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq python-python-command "/usr/bin/python3")
#+END_SRC
Indent python properly
#+NAME: py_indent
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq python-indent-offset 4)
#+END_SRC
Always require a final newline.
#+NAME: final newline
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq require-final-newline t)
#+END_SRC
If you type while you have a selection going on, delete the selection, similar to other editors.
#+NAME: delete-section-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (delete-selection-mode t)
#+END_SRC
Auto-refresh buffers.
#+NAME: auto-revert-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-auto-revert-mode 1)
#+END_SRC
Auto refresh dired, silently.
#+NAME: auto-revert-dired
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)
#+END_SRC
Fix terminals giving extra newlines
#+NAME: terminal-fix
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'term-mode-hook 'toggle-truncate-lines)
#+END_SRC
** Appearance
Change how Emacs looks.
*** Toolbars
Disable toolbars, because I don't need them
#+NAME: Toolbars
#+BEGIN_SRC emacs-lisp :tangle yes
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC
*** Custom
Stuff set by Custom.
#+NAME: Custom
#+BEGIN_SRC emacs-lisp :tangle yes
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(browse-url-browser-function (quote browse-url-generic))
   '(browse-url-generic-program "google-chrome-stable")
   '(custom-safe-themes
     (quote
      ("104df8353e0475e27eac464e780400273ef384fa5803af8af8d0a27e2c33b761" "1e3b2c9e7e84bb886739604eae91a9afbdfb2e269936ec5dd4a9d3b7a943af7f" "39dd7106e6387e0c45dfce8ed44351078f6acd29a345d8b22e7b8e54ac25bac4" "cc60d17db31a53adf93ec6fad5a9cfff6e177664994a52346f81f62840fe8e23" "158ca85e9f3eacdcbfc43163200b62c900ae5f64ba64819dbe4b27655351c051" "8db4b03b9ae654d4a57804286eb3e332725c84d7cdab38463cb6b97d5762ad26" "a8245b7cc985a0610d71f9852e9f2767ad1b852c2bdea6f4aadc12cce9c4d6d0" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" "ea489f6710a3da0738e7dbdfc124df06a4e3ae82f191ce66c2af3e0a15e99b90" default)))
   '(org-agenda-files (quote ("~/gitgud.org")))
   '(py-force-py-shell-name-p t)
   '(py-shell-name "python2"))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(org-level-1 ((t (:inherit variable-pitch :foreground "#FD971F" :height 1.0 :family "Terminus"))))
   '(org-level-2 ((t (:inherit variable-pitch :foreground "#A6E22E" :height 1.0 :family "Terminus"))))
   '(org-level-3 ((t (:inherit variable-pitch :foreground "#66D9EF" :height 1.0 :family "Terminus"))))
   '(org-level-4 ((t (:inherit variable-pitch :foreground "#E6DB74" :height 1.0 :family "Terminus"))))
   '(org-level-5 ((t (:inherit variable-pitch :foreground "#E6DB74" :height 1.0 :family "Terminus")))))
#+END_SRC
*** Theme and font
Set the theme and font
#+NAME: Theme
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq custom-safe-themes t)
  (set-frame-font "Terminus-12")
  (use-package ample-theme)
  (ample-theme)
#+END_SRC
**** TODO Font doesn't currently work right, requires .Xdefaults hack
*** powerline
Powerline for Emacs.
https://github.com/milkypostman/powerline
#+NAME: powerline
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package powerline
    :config (powerline-default-theme))
#+END_SRC
** Packages
Configuration for packages. This category is kind of ambigious.
*** Initialize packages
Add alternative package sources such as melpa. Note that currently this is unsafe - the org repository doesn't use https, and AFAIK none of them use TLS. There is a fix for this floating online, but at the time I couldn't get it to work.
#+NAME: Package initialization
#+BEGIN_SRC emacs-lisp :tangle yes
    (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                             ("org" . "http://orgmode.org/elpa/")
                             ("melpa" . "https://melpa.org/packages/")
                             ("melpa-stable" . "https://stable.melpa.org/packages/")
                             ("elpy" . "http://jorgenschaefer.github.io/packages/")))
    (package-initialize)
#+END_SRC

Initialize use-package
#+NAME: Use-package
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'package)
;;  (setq package-enable-at-startup nil)
;;  (package-initialize)
#+END_SRC
*** Programming
**** geiser
Geiser is like SLIME for Scheme. 
http://www.nongnu.org/geiser/
#+NAME: Geiser
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package geiser
    :config
    (add-hook 'scheme-mode-hook 'geiser-mode))  
#+END_SRC
**** SLIME
Use the Superior Lisp Interaction Mode for Emacs (SLIME).
https://common-lisp.net/project/slime/
(currently turned off due to some bug)
TODO: Fix
#+NAME: SLIME
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package slime
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (load (expand-file-name "~/quicklisp/slime-helper.el")))
#+END_SRC
Use slime-company, for autocompletions using company-mode.
https://github.com/anwyn/slime-company
#+NAME: slime-company
ffda#+BEGIN_SRC emacs-lisp :tangle no
  (use-package slime-company
    :config
    (slime-setup '(slime-company)))
#+END_SRC
***** TODO Learn properly
***** TODO Use more often (by programming in lisp more often ;-))
***** TODO Figure out if  I still need the slime-helper.el file
***** TODO Get working again (currently broken)
**** agressive-indent
Keep code *always* indented
https://github.com/Malabarba/aggressive-indent-mode
Currently off.
#+NAME: agressive-indent
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package agressive-indent
    :config
    (aggressive-indent-global-mode 1))
#+END_SRC
**** company
Text completion framework for Emacs. Allows for text completion.
http://company-mode.github.io/
#+NAME: company
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-idle-delay 0.25)
    (setq company-tooltip-limit 10)
    (setq company-minimum-prefix-length 4)
    (setq company-global-modes
          '(not
            eshell-mode comint-mode org-mode erc-mode)))
#+END_SRC
**** flycheck
Very good syntax checking.
http://www.flycheck.org/en/latest/
Note to self: developer (lunaryorn) is a massive jackass
#+NAME: flycheck
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package flycheck
    :config
    (add-hook 'after-init-hook #'global-flycheck-mode))
#+END_SRC
**** lispy + lispyville
Lispy: reimagination of paredit, with a vi-esque slant.
https://github.com/abo-abo/lispy
#+NAME: lispy
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lispy
    :config
    (add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode) 1))
    (add-hook 'eval-expression-minibuffer-setup-hook (lambda () (lispy-mode 1)))
    (add-hook 'ielm-mode-hook (lambda () (lispy-mode 1)))
    (add-hook 'lisp-mode-hook (lambda () (lispy-mode 1)))
    (add-hook 'lisp-interaction-mode-hook (lambda () (lispy-mode 1)))
    (add-hook 'scheme-mode-hook (lambda () (lispy-mode 1)))
    (define-key  lispy-mode-map-lispy (kbd "\"") 'lispy-doublequote))
#+END_SRC

Lispyville: Lisp editing for evil, using together with lispy
https://github.com/noctuid/lispyville
#+NAME: lispyville
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lispyville
    :config
    (add-hook 'lispy-mode-hook #'lispyville-mode))
#+END_SRC
**** company-jedi
Autocompletion for python
https://github.com/syohex/emacs-company-jedi

#+NAME: company-jedi
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))
  (use-package company-jedi
    :init
    (add-hook 'python-mode-hook 'my/python-mode-hook))
#+END_SRC
**** web-mode
Major-mode for all the web-related stuff.
http://web-mode.org/
#+NAME: web-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package web-mode
    :init
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tmpl\\'" . web-mode))
    (setq web-mode-engines-alist
          '(("cheetah" . "\\.tmpl\\'"))))
#+END_SRC
*** Visual
**** rainbow-delimiters
Rainbow delimiters, give parens rainbow colors. Mostly useful when programming lisp.
https://github.com/Fanael/rainbow-delimiters
#+NAME: rainbow-delimiters
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
**** dired-details+
Allows you to hide some dired details, such as read/write permissions, creation date etc. Toggle with '(' or ')'.
https://www.emacswiki.org/emacs/dired-details+.el
#+NAME: dired-details+
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dired-details+
    :commands dired-details-toggle
    :config
    (setq-default dired-details-hidden-string "--- ")
    (dired-details-install)
    (dired-details-hide)
    (add-hook 'dired-mode-hook 'dired-details-toggle))
#+END_SRC
**** fic-mode
Highlights TODO, FIXME etc
https://github.com/lewang/fic-mode
#+NAME: fic-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package fic-mode
    :config
    (add-hook 'prog-mode-hook #'fic-mode))
#+END_SRC
**** rainbow-mode
Display hex colours in their corresponding colour.
https://julien.danjou.info/projects/emacs-packages
#+NAME: rainbow-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-mode
    :config
    (rainbow-mode 1))
#+END_SRC
*** Navigation
**** avy
Allows you to jump to any character in an easy and intuitive way. Analogous to vim-easymotion.
Configurations are such that avy behaves a bit more like ace-jump would.
https://github.com/abo-abo/avy
#+NAME: avy
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package avy
    :config
    (setq avy-keys (number-sequence ?a ?z))
    (setq avy-all-windows nil)
    (setq avy-timeout-seconds 0.3)
    (setq avy-keys '(?a ?s ?d ?f ?j ?k ?l ?g ?h ?r ?e ?u ?i ?v ?n)))
#+END_SRC
**** ace-window
Switch between windows using ace-jump.
https://github.com/abo-abo/ace-window
#+NAME: ace-window
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ace-window
    :commands (ace-window)
    :bind (("C-x o" . ace-window))
    :config
    (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l ?; ?g ?h))) 
#+END_SRC
**** windmove
Move to a different window more easily.
https://www.emacswiki.org/emacs/WindMove

#+NAME: windmove
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "s-<left>") 'windmove-left)
  (global-set-key (kbd "s-<right>") 'windmove-right)
  (global-set-key (kbd "s-<down>") 'windmove-down)
  (global-set-key (kbd "s-<up>") 'windmove-up)
#+END_SRC
*** Project management
**** magit
Magit is an extremely powerful and pleasant Git interface for Emacs. If you use Git a lot, this package is pretty much a must.
https://magit.vc/
#+NAME: magit
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
    :config
    (setq with-editor-emacsclient-executable "/usr/bin/emacsclient-emacs-25"))
#+END_SRC
***** TODO Unlock the full potential of git and magit
*** Text editing
**** evil
Vi(m) emulation layer for Emacs. The best of the best - I wouldn't use Emacs if this didn't exist (and I love Emacs!)
https://bitbucket.org/lyro/evil/wiki/Home
#+NAME: evil
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package evil
    :commands evil-ex
    :config
    (evil-mode 1))

  (require 'evil)
  (define-key evil-normal-state-map (kbd ";") 'evil-ex)
  (define-key evil-normal-state-map (kbd "SPC") 'avy-goto-char-timer)
  (define-key evil-visual-state-map (kbd "SPC") 'avy-goto-char-timer)
#+END_SRC
Also get evil-surround, for surrounding text (for example, in parens). Port of vim-surround.
#+NAME: evil-surround
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package evil-surround
    :config
    (evil-surround-mode t))
#+END_SRC
***** TODO Brush up my vim-fu - it's gotten kinda rusty
***** TODO There's a reason for the latter half of this code, but I forgot what
***** TODO Start using evil-surround again
**** multiple-cursors
Multiple cursors, useful as a replacement for macros in some cases.
IMO, sometimes feels a bit hacky because it very much operates on text and not structure. Doesn't play too well with evil-mode.
https://github.com/magnars/multiple-cursors.el
#+NAME: multiple-cursors
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package multiple-cursors
    :config
    ;; Multiple-cursors doesn't play well with evil mode.
    ;; Disable evil mode when going into multiple-cursors-mode.
    (add-hook 'multiple-cursors-mode-enabled-hook 'evil-emacs-state)
    (add-hook 'multiple-cursors-mode-disabled-hook 'evil-normal-state)
    (setq mc/unsupported-minor-modes '(company-mode auto-complete-mode flyspell-mode jedi-mode)))
#+END_SRC
***** TODO Keybindings
***** TODO Learn to use and start using
**** expand-region
Allows for easier selection, by incrementally expanding the selected area.
https://github.com/magnars/expand-region.el
#+NAME: expand-region
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package expand-region
    :commands er/expand-region
    :bind ("C-=" . er/expand-region))
#+END_SRC
**** yasnippet
Gives snippets, similar to what TextMate did.
https://github.com/joaotavora/yasnippet
#+NAME: yasnippet
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yasnippet
    :bind
    ("C-c c" . yas-expand)
    :config
    (yas-global-mode 1))
#+END_SRC
*** Emacs enhancements
*** No littering
Don't clutter my .emacs.d.
https://github.com/tarsius/no-littering
#+NAME: no-littering
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package no-littering)
#+END_SRC
**** hydra
Tie commands into a family of short keybindings.
https://github.com/abo-abo/hydra

#+NAME: hydra
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package hydra)
#+END_SRC
**** ivy
Like helm, but cleaner and faster.
https://github.com/abo-abo/swiper
#+NAME: ivy
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ivy
    :bind
    (:map ivy-mode-map
          ("C-'" . ivy-avy))
    :config
    (ivy-mode 1)
    (setq ivy-height                10
          ivy-count-format          "(%d/%d) "
          ivy-use-virtual-buffers   t
          ivy-re-builders-alist     '((t . ivy--regex-ignore-order))
          ivy-initial-inputs-alist '((org-refile . "")
                                     (org-capture-refile . "")
                                     (counsel-M-x . "")
                                     (counsel-describe-function . "")
                                     (counsel-describe-variable . "")
                                     (man . "")
                                     (woman . "")))
    (global-set-key (kbd "C-s") 'swiper)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)) 
#+END_SRC
**** helm
Completion and selection framework. Fork of anything.el. Hard to explain exactly what it does, but one of the best Emacs packages out there IMO.
https://github.com/emacs-helm/helm
Currently off, as I'm using Ivy now.

#+NAME: helm
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package helm
    :init (require 'helm-config)
    :commands (helm-command-prefix
               helm-execute-persistent-action
               helm-select-action
               helm-select-action
               helm-M-x
               helm-show-kill-ring
               helm-mini
               helm-find-files
               helm-google-suggest)
    :bind (("C-c h" . helm-command-prefix)
           ("M-x" . helm-M-x)
           ("M-y" . helm-show-kill-ring)
           ("C-x b" . helm-mini)
           ("C-x C-f" . helm-find-files)
           ("C-c h q" . helm-google-suggest)
           :map helm-map
           ("<tab>" . helm-execute-persistent-action)
           ("C-i" . helm-execute-persistent-action)
           ("C-z" . helm-select-action))
    :config
    (helm-mode t)
    (helm-autoresize-mode 1)
    (global-unset-key (kbd "C-x c"))
    (setq helm-split-window-in-side-p            t
          helm-move-to-line-cycle-in-source      t
          helm-ff-search-library-in-sexp         t
          helm-scroll-amount                     8
          helm-ff-file-name-history-use-recentf  t
          helm-mode-fuzzy-match                  t
          helm-completion-in-region-fuzzy-match  t
          helm-autoresize-max-height             30)
    (helm-autoresize-mode t)
    (when (executable-find "curl")
      (setq helm-google-suggest-use-curl-p t))
    (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages))
#+END_SRC
**** key-chord
Allows key chording, meaning that pressing multiple keys simultaneously or soon after another will run a command.
https://www.emacswiki.org/emacs/download/key-chord.el
#+NAME: key-chord
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package key-chord
    :config
    (setq key-chord-two-keys-delay 0.5)
    (key-chord-mode t))
;; It wants to have this outside of :config for some reason.
;; TODO: Check out if it still does.
  (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
#+END_SRC
***** TODO See code
**** which-key
Shows keybindings for currently entered incomplete command. Useful for discovery or if you forgot what the keybinding for something was.
https://github.com/justbur/emacs-which-key
#+NAME: which-key
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package which-key
    :config
    (which-key-mode t))
#+END_SRC
**** dired+
An improvement on dired.
https://www.emacswiki.org/emacs/DiredPlus
#+NAME: dired+
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dired+)
#+END_SRC
**** neotree
File sidebar for Emacs.
https://www.emacswiki.org/emacs/SrSpeedbar
#+NAME: neotree
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package neotree
    :bind
    (("C-c s" . neotree)))
#+END_SRC
**** shackle
Deal with pop-up buffers.
https://github.com/wasamasa/shackle
#+NAME: shackle
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package shackle
    :config
    (setq shackle-default-alignment 'below
          shackle-default-size 10
          shackle-rules
          '(("*Backtrace*" :popup t :size 20 :align t)
            (buffer-menu-mode :size 20 :align t)
            (apropos :size 20 :popup t :align t :select t)
            ("*Warnings*" :ignore :align t)
            ("*Help*" :select t)))
    (shackle-mode t))
#+END_SRC
** EXWM
Code for the X Emacs Window Manager (EXWM).
https://github.com/ch11ng/exwm/wiki
(Currently turned off)
#+NAME: exwm
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package exwm)
  (use-package exwm-x)
  (use-package exwm-config
    :config
    ;; 9 Workspaces by default
    (setq exwm-workspace-number 10)
    ;; Naming windows; see the EXWM example config (https://github.com/ch11ng/exwm/wiki/Configuration-Example)
    (add-hook 'exwm-update-class-hook
              (lambda ()
                (unless (or (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                            (string= "gimp" exwm-instance-name))
                  (exwm-workspace-rename-buffer exwm-class-name))))
    (add-hook 'exwm-update-title-hook
              (lambda ()
                (when (or (not exwm-instance-name)
                          (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                          (string= "gimp" exwm-instance-name))
                  (exwm-workspace-rename-buffer exwm-title))))
    ;; Keybindings
    ;; Functions
    (defun exwm-kahr/launcher ()
      (interactive)
      (exwm-x-run-shell-command "bash -c 'rofi -show run'"))
    (defun exwm-kahr/terminal ()
      (interactive)
      (exwm-x-run-shell-command "urxvt"))
    (exwm-input-set-key (kbd "s-x") #'exwm-reset)
    (exwm-input-set-key (kbd "s-w") #'exwm-workspace-switch)
    (dotimes (i 10)
      (exwm-input-set-key (kbd (format "s-%d" i))
                          `(lambda ()
                             (interactive)
                             (exwm-workspace-switch ,i)))) 
    (exwm-input-set-key (kbd "s-r") 'exwm-kahr/launcher)
    (exwm-input-set-key (kbd "s-t") 'exwm-kahr/terminal)
    ;; Start EXWM
    (require 'exwm-randr)
    (setq exwm-randr-workspace-output-plist '(0 "HDMI-0" 1 "DVI-D-1" 2 "DVI-I-1" 3 "DVI-I-1" 4 "DVI-I-1" 5 "DVI-I-1" 6 "VGA-0" 7 "VGA-0" 8 "VGA-0" 9 "VGA-0"))
    (add-hook 'exwm-randr-screen-change-hook
              (lambda ()
                (start-process-shell-command
                 "xrandr" nil "xrandr --output HDMI-0 --right-of DVI-D-1 --auto")))
    (exwm-enable)
    (exwm-randr-enable))
#+END_SRC
** Org
*** Agenda
Org's agenda is essentially a replacement for a real-life agenda.

Agenda files
#+NAME: org-agenda-files
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-files (quote ("~/Life/agenda.org")))
  (add-to-list 'org-modules "org-habit")
  (setq org-todo-keywords
        '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))
  (global-set-key (kbd "C-c g") 'org-agenda ) 
#+END_SRC
** Custom code
*** Custom functions
Edit the current file with sudo
#+NAME: sudo-edit
#+BEGIN_SRC emacs-lisp :tangle yes
    (defun sudo-edit (&optional arg)
    "Edit currently visited file as root.

  With a prefix ARG prompt for a file to visit.
  Will also prompt for a file to visit if current
  buffer is not visiting a file."
    (interactive "P")
    (if (or arg (not buffer-file-name))
        (find-file (concat "/sudo:root@localhost:"
                           (ido-read-file-name "Find file(as root): ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+END_SRC

Get a random activity from a file
#+NAME: random-activity
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; FIXME this is horrible holy shit wtf I should neck myself
  (defun read-lines (filePath)
    "Return a list of lines of a file at filePath."
    (with-temp-buffer
      (insert-file-contents filePath)
      (split-string (buffer-string) "\n" t)))

  (defun ra/special (s)
    (string= (substring s nil 1) "*"))

  (defun ra/extract-cat (l)
    (let ((n (cl-position t (cdr (mapcar #'ra/special l)))))
      (list (subseq l 0 (+ n 1)) (nthcdr (+ n 1) l))))

  (defun random-activity (&optional user-cat)
    (setq file-raw (read-lines "/home/kahr/Tools/activities.org"))
    (setq cats ())
    (let* ((num-special (count t (mapcar #'ra/special file-raw)))
           (activities
            (dotimes (n (- num-special 1))
              (let ((cat (car (ra/extract-cat file-raw)))
                    (new-raw (cadr (ra/extract-cat file-raw))))
                (setq cats (cons cat cats))
                (setq file-raw new-raw)))))
      ;; (nth (random (length activities))
      ;;   activities)
      (setq cats (cons file-raw cats))
      cats
      (let ((current-cat
             (if user-cat
                 (car
                  (seq-filter
                   (lambda (l)
                     (string= (downcase (car l)) (downcase (concat "* " user-cat))))
                   cats))
               (nth (random (length cats)) cats))))
  (concat (nth (random (length (cdr current-cat)))
               (cdr current-cat))
          " (" (substring (car current-cat) 2 nil) ")"))))

#+END_SRC

Insert the current date
#+NAME: insert-date
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun insert-date ()
    (interactive)
    (insert (format-time-string "%d.%m-%Y")))
#+END_SRC

Open a new line above or below the point
#+NAME: open-line-below
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun open-line-below ()
    (interactive)
    (end-of-line)
    (newline)
    (forward-line -1))
  (defun open-line-above ()
    (interactive)
    (beginning-of-line)
    (newline)
    (indent-for-tab-command))
#+END_SRC

Some magit tweaks; make magit-status go full screen and restore the previous configuration upon closing.
#+NAME: magit tweaks
#+BEGIN_SRC emacs-lisp :tangle yes
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))
  (defun magit-quit-session ()
    "Restore the previous window configuration and kill the magit buffer."
    (interactive)
    (kill-buffer)
    (jump-to-register :magit-fullscreen))
#+END_SRC

Evaluate and replace an elisp sexp
#+NAME: eval-and-replace
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (insert " ") ;; Dirty hack
    (forward-char)
    (backward-kill-sexp)
    (condition-case nil
        (prin1 (eval (read (current-kill 0)))
               (current-buffer))
      (error (message "Invalid expression")
             (insert (current-kill 0)))))
#+END_SRC

Paste above or below the point.
#+NAME: paste-above and -below
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun paste-above ()
    (interactive)
    (let ((pos (point))
          (cur-max (point-max)))
      (beginning-of-line)
      (yank)
      (newline-and-indent)
      (goto-char (+ pos (- (point-max) cur-max)))))

  (defun paste-below ()
    (interactive)
    (let ((pos (point))
          (cur-max (point-max)))
      (beginning-of-line)
      (forward-line)
      (yank)
      (newline-and-indent)
      (goto-char pos)))
#+END_SRC
*** Keybindings
Pretty much self-explanatory
#+NAME: keybindings
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-zoom (global-map "<f2>")
    "zoom"
    ("g" text-scale-increase "in")
    ("l" text-scale-decrease "out"))

  (defhydra hydra-launch (:color blue)
    "
  ^Term^             ^Files^           ^IRC^          ^Email^        ^System        
  ^^^^^^^^--------------------------------------------------------------------------
  _t_: ansi-term     _d_: dired        _i_: erc       _g_: gnus      _l_: linux app
  _e_: eshell
  _s_: shell
  "
    ("t" ansi-term "ansi-term")
    ("e" eshell "eshell")
    ("s" shell "shell")
    ("d" dired "dired")
    ("i" erc "erc")
    ("g" gnus "gnus")
    ("l" counsel-linux-app "counsel-linux-app"))
  (global-set-key (kbd "C-c l") 'hydra-launch/body)

  (defhydra hydra-navigate (:color blue)
    "
  ^Char^             ^Line^           ^search^          ^File^          ^buffer
  ^^^^^^^^---------------------------------------------------------------------------------------
  _c_: char timer    _l_: line        _s_: search       _f_: find-file  _b_ buffer
  _j_: char                         _a_: search all   _p_: ffap       _o_ buffer other window
  "
    ("c" avy-goto-char-timer "avy-goto-char-timer")
    ("j" avy-goto-char "avy-goto-char")
    ("l" avy-goto-line "avy-goto-line")
    ("s" swiper "swiper")
    ("a" swiper-all "swiper-all")
    ("f" counsel-find-file "counsel-find-file")
    ("p" counsel-find-file-at-point "counsel-find-file-at-point")
    ("b" switch-to-buffer "switch-to-buffer")
    ("o" switch-to-buffer-other-window "switch-to-buffer-other-window"))
  (global-set-key (kbd "C-c n") 'hydra-navigate/body)

  (defun eshell-full-clear ()
    (interactive)
    (eshell/clear t))

  (defhydra hydra-eshell (:color blue)
    "
  ^I/O^              ^Visual
  ^^^^^^^-----------------------------
  _b_: buffer        _c_: clear
                   _x_: clear history
  "
    ("b" eshell-insert-buffer-name "eshell-insert-buffer-name")
    ("c" eshell/clear "eshell/clear")
    ("x" eshell-full-clear "eshell full clear"))
  (global-set-key (kbd "C-c e") 'hydra-eshell/body)

  (global-set-key (kbd "C-c d") 'insert-date)
  (global-set-key (kbd "C-x g") 'webjump)
  (global-set-key (kbd "C-c b") 'paste-below)
  (global-set-key (kbd "C-c a") 'paste-above)
  (global-set-key (kbd "C-c m") 'magit-status)
  (global-set-key (kbd "C-c f") 'eval-region)
  (global-set-key (kbd "C-x C-r") 'sudo-edit)
  (global-set-key (kbd "C-c r") 'rename-buffer)
  (define-key evil-normal-state-map (kbd "g k") 'open-line-above)
  (define-key evil-normal-state-map (kbd "g j") 'open-line-below)
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
  (define-key evil-normal-state-map (kbd "g a") 'paste-above)
  (define-key evil-normal-state-map (kbd "g p") 'paste-below)
  (global-set-key (kbd "C-h C-f") 'find-function)
  (global-set-key (kbd "C-h C-v") 'find-variable)
  (global-set-key (kbd "C-c p") #'mingus-toggle)
  (define-key evil-insert-state-map (kbd "C-o") nil)
  (define-key evil-insert-state-map (kbd "C-d") nil)
  (global-set-key (kbd "<XF86AudioLowerVolume>") #'mingus-vol-down)
  (global-set-key (kbd "<XF86AudioRaiseVolume>") #'mingus-vol-up)
  (global-set-key (kbd "<XF86AudioMute>") #'mingus-toggle)
#+END_SRC
