/* Algorithms and Datastructures in C
 * Assignment 1: Signals
 * Kahr Kunne & Merijn Schr"oder */

#include <stdlib.h>
#include <stdio.h>
#include <assert.h>

typedef struct Stack {
	int *array;
	int top;
	int size;
} Stack;

Stack newStack (int s) {
    Stack st;
    st.array = malloc(s*sizeof(int));
    assert(st.array != NULL);
    st.top = 0;
    st.size = s;
	return st;
}

void doubleStackSize (Stack *stp) {
    int newSize = 2 * stp->size;
    stp->array = realloc(stp->array, newSize * sizeof(int));
    assert(stp->array != NULL);
    stp->size = newSize;
}

int isEmptyStack (Stack st) {
	return (st.top == 0);
}

void stackEmptyError () {
    printf("stack empty\n");
    abort();
}

void push (int value, Stack *stp) {
    if (stp->top == stp->size) {
        doubleStackSize(stp);
    }
    stp->array[stp->top] = value;
    stp->top++;
}

int pop (Stack *stp) {
    if ( isEmptyStack(*stp) ) {
        stackEmptyError();
    }
    (stp->top)--;
    return (stp->array)[stp->top];
}

void freeStack (Stack st) {
    free(st.array);
}

int main(int argc, char *argv[]) {
    int n;
    scanf("%d", &n);
    
    for (int i = 0; i < n; i++) {
		int l;
		scanf("%d", &l);
		
		Stack st;
		st = newStack(l);
		
		int newHeight;
		for (int j = 0; j <= l; j++) {
			if (j < l) {
				scanf("%d", &newHeight);
			} else {
				newHeight = 0;
			}
			
			if (newHeight >= st.top) {
				for (int k = st.top; k <= newHeight; k++) {
					push(j, &st);
				}
			} else if (newHeight < st.top - 1) {
				for (int k = st.top - 1; k > newHeight; k--) {
					printf("[%d,%d)@%d ", st.array[st.top - 1], j, st.top - 1);
					pop(&st);
				}
			}
		}
		freeStack(st);
		printf("\n");
	}
    return 0;
}
