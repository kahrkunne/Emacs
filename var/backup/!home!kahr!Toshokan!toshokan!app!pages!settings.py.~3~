import base64
import hashlib

from . import Page
from ..models import User

from tornado.web import HTTPError

from .templates.settings import settings

class Settings(Page):
    template = settings

    def get(self, username, item):
        user = self.db.query(User).filter_by(name=username.lower()).first()
        if not user:
            raise HTTPError(404)

        # TODO which settings require authentication should probably depend on some config somewhere
        authenticated = username == self.get_current_user()['name']

        settings = {'animelist_display_progress': user.animelist_display_progress,
                    'animelist_display_score': user.animelist_display_score,
                    'animelist_display_type': user.animelist_display_type,
                    'animelist_display_start_date': user.animelist_display_start_date,
                    'animelist_display_end_date': user.animelist_display_end_date,
                    'animelist_display_num_rewatches': user.animelist_display_num_rewatches,
                    'animelist_private': user.animelist_private}

        # TODO I don't really think this is needed or useful
#        if item:
#            settings = {item: settings[item]}

        accept = self.request.headers.get('Accept').split(',')
        if self.API_MIME_TYPE_PUBLIC in accept:
            self.set_header('Content-Type', self.API_MIME_TYPE_PUBLIC)
            self.write({'data': settings})
        elif 'text/html' in accept:
            if not authenticated:
                raise HTTPError(401)
            self.write(self.render())
        else:
            raise HTTPError(406)

    def put(self, username, item):
        content_type = self.request.headers.get('Content-type').split(',')
        if self.API_MIME_TYPE_PUBLIC not in content_type:
            raise HTTPError(406)
        elif len(self.request.headers.get('Content-type').split(';')) > 1:
            raise HTTPError(415)

        try:
            user = self.db.query(User).filter_by(name=username.lower()).first()
        except:
            raise HTTPError(404)

        try:
            assert username == self.get_current_user()['name']
        except:
            raise HTTPError(401)

        # TODO implement for single items
        # TODO think about whether this is a good idea
        if not item:
            settings = self.get_json_argument()
            for k, v in settings.items():
                setattr(user, k, v)
                print(k, v)
            self.db.commit()
        elif item == 'profile_picture':
            picture = self.get_json_argument()
            # TODO handle invalid inputs
            imgdata = base64.b64decode(picture.split(',')[-1])
            ext = picture.split('/')[1].split(';')[0]
            if ext != 'png' and ext != 'jpeg':
                # TODO more appropriate error
                raise HTTPError(400)

            filename = '{}.{}'.format(hashlib.md5('{}{}'.format(user.name, picture).encode('utf-8')).hexdigest(),
                                      ext)
            print(filename)
            with open('res/img' + filename, 'wb') as f:
                f.write(imgdata)
