#include <stdio.h>  /* getchar, printf */
#include <stdlib.h> /* NULL, malloc, free */
#include <string.h> /* strcpy */
#include <ctype.h>  /* isspacespace, isdigit, isalpha, isalnum */
#include <assert.h> /* assert */
#include "scanner.h"
#include "recognizeExp.h"

char *readInput() {
  int strLen = MAXINPUT;
  int c = getchar();
  int i = 0;
  char *s = malloc((strLen+1)*sizeof(char));
  assert( s != NULL );
  while (c != '\n') {
    s[i] = c;
    i++;
    if ( i >= strLen ) { /* s is not large enough, its length is doubled */
      strLen = 2*strLen;
      s = realloc(s,(strLen+1)*sizeof(char));
      assert( s != NULL );
    }
    c = getchar();
  }
  s[i] = '\0';
  return s;
}

int matchNumber(char *ar, int *ip) {
  int n = 0;
  while (isdigit(ar[*ip])) {
    n = 10*n + (ar[*ip] - '0');
    (*ip)++;
  }
  return n;
}

char matchCharacter(char *ar, int *ip) {
  char s = ar[*ip];
  (*ip)++;
  return s;
}

char *matchIdentifier(char *ar, int *ip) {
  int j = 0;
  int strLen = MAXIDENT;
  char *s = malloc((strLen+1)*sizeof(char));
  assert( s != NULL );
  while (isalnum(ar[*ip+j])) {
    s[j] = ar[*ip+j];
    j++;
    if ( j >= strLen ) { /* s is not large enough, its length is doubled */
      strLen = 2*strLen;
      s = realloc(s,(strLen+1)*sizeof(char));
      assert( s != NULL );
    }
  }
  s[j] = '\0';
  *ip = *ip + j;
  return s;
}

List newNode(char *ar, int *ip) { /* precondition: !isspace(a[*ip]) */
  List node = malloc(sizeof(struct ListNode));
  assert(node!=NULL);
  node->next = NULL;
  if (isdigit(ar[*ip])) {   /* we see a digit, so a number starts here */
    node->tt = Number;
    (node->t).number = matchNumber(ar,ip);
    return node;
  }
  if (isalpha(ar[*ip])) { /* we see a letter, so an identifier starts here */
    node->tt = Identifier;
    (node->t).identifier = matchIdentifier(ar,ip);
    return node;
  }  /* no space, no number, no identifier: we call it a symbol */
  node->tt = Symbol;
  (node->t).symbol = matchCharacter(ar,ip);
  return node;
}

List tokenList(char *ar) {
  List lastNode = NULL;
  List node = NULL;
  List tl = NULL;
  int i = 0;
	int length = strlen(ar);
  while (i < length) {
    if (isspace(ar[i])) {   /* spaces are skipped */
      i++;
    } else {
      node = newNode(ar,&i);
      if (lastNode == NULL) { /* there is no list yet */
        tl = node;
      } else {            /* there is already a list; add node at the end */
        (lastNode)->next = node;
      }
      lastNode = node;
    }
  }
  return tl;
}

void printList(List li) {
  while (li != NULL) {
    switch (li->tt) {
    case Number:
      printf("%d ",(li->t).number);
      break;
    case Identifier:
      printf("%s ",(li->t).identifier);
      break;
    case Symbol:
      printf("%c ",(li->t).symbol);
      break;
    }
    li = li->next;
  }
  printf("\n");
}

void freeTokenList(List li) {
  if (li == NULL) {
    return;
  }
  if (li->tt == Identifier) {
    free((li->t).identifier);
  }
  freeTokenList(li->next);
  free(li);
}

void scanExpressions() {
  char *ar;
  List li;
  printf("give an expression: ");
  ar = readInput();
  while (ar[0] != '!') {
    li = tokenList(ar);
    printList(li);
    free(ar);
    freeTokenList(li);
    printf("\ngive an expression: ");
    ar = readInput();
  }
  free(ar);
  printf("good bye\n");
}

int acceptNumber(List *lp) {
  if (*lp != NULL && (*lp)->tt == Number) {
    *lp = (*lp)->next;
    return 1;
  }
  return 0;
}

int acceptIdentifier(List *lp) {
  if (*lp != NULL && (*lp)->tt == Identifier ) {
    *lp = (*lp)->next;
    return 1;
  }
  return 0;
}

int acceptCharacter(List *lp, char c) {
  if (*lp != NULL && (*lp)->tt == Symbol && ((*lp)->t).symbol == c ) {
    *lp = (*lp)->next;
    return 1;
  }
  return 0;
}

int acceptFactor(List *lp) {
  return acceptNumber(lp)
    || acceptIdentifier(lp)
    || ( acceptCharacter(lp,'(')
      && acceptExpression(lp)
      && acceptCharacter(lp,')')
    );
}

int acceptTerm(List *lp) {
  if ( !acceptFactor(lp) ) {
    return 0;
  }
  while ( acceptCharacter(lp,'*') || acceptCharacter(lp,'/') ) {
    if ( !acceptFactor(lp) ) {
      return 0;
    }
  }   /* no * or /, so we reached the end of the term */
  return 1;
}

int acceptExpression(List *lp) {
  if ( !acceptTerm(lp) ) {
    return 0;
  }
  while ( acceptCharacter(lp,'+') || acceptCharacter(lp,'-') ) {
    if ( !acceptTerm(lp) ) {
      return 0;
    }
  } /* no + or -, so we reached the end of the expression */
  return 1;
}

/* changed this function*/
int recognizeExpressions(char *ar) {
  List tl, tl1;
  tl = tokenList(ar);
  printf("the token list is ");
  printList(tl);
  tl1 = tl;
  if ( acceptExpression(&tl1) && tl1 == NULL ) {
    free(ar);
    freeTokenList(tl);
    freeTokenList(tl1);
    return 1;
  } else {
    free(ar);
    freeTokenList(tl);
    freeTokenList(tl1);
    return 0;
  }
}

/* added this function */
int recognizeEquation () {
  int strLen = 10;
  char *ar, *ar1 = malloc(sizeof(char) * strLen), *ar2 = malloc(sizeof(char) * strLen);
  printf("give an equation: ");
  ar = readInput();

  while (ar[0] != '!') {
    int i = 0;
    while (ar[i] != '=' && ar[i] != '\0') {
    /* also terminates when there is no '=' */
      ar1[i] = ar[i];
      i++;
      if (i >= strLen && ar[i] != '=') { /* ar1 is too short */
        strLen*=2;
        ar1 = realloc(ar1,(strLen+1)*sizeof(char));
        assert( ar1 != NULL );
      }
    }
    ar1[i] = '\0';

    int j = 0;
    strLen = 10;
    while (ar[j] != '\0') {
      ar2[j] = ar[j + i + 1];
      j++;
      if (j >= strLen && ar[j] != '\0') { /* ar2 is too short */
        strLen*=2;
        ar2 = realloc(ar2,(strLen+1)*sizeof(char));
        assert( ar2 != NULL );
      }
    }
    ar2[i] = '\0';
    int x = 0; printf("ar1: ");
    while (ar1[x] != '\0') {
      printf("%c ", ar1[x]);
      x++;
    }
    printf("\n");

    x = 0; printf("ar2: ");
    while (ar2[x] != '\0') {
      printf("%c ", ar2[x]);
      x++;
    }
    printf("\n");

    if (recognizeExpressions(ar1) && recognizeExpressions(ar2)) {

      printf("this is an equation\n\n");
    } else {
      printf("this is not an equation\n\n");
    }
    free(ar);
    free(ar1);
    free(ar2);
    printf("give an equation: ");
    ar = readInput();
  }
  printf("good bye\n");
}

int main(int argc, char *argv[]) {
  recognizeEquation();
  //recognizeExpressions();
  return 0;
}
