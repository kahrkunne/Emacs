import inspect
from linking import gen_link, link

from sqlalchemy.ext.declarative import DeclarativeMeta, declarative_base
from sqlalchemy import (Column, Integer, String, Sequence, ForeignKey, create_engine)
from sqlalchemy.orm import Session, relationship, sessionmaker

import inspect

from sqlalchemy import (Column, Integer, String, Sequence, ForeignKey)
from sqlalchemy.orm import relationship
from sqlalchemy import (Column, Integer, String, Date)
from sqlalchemy.ext.declarative import declarative_base

from sqlalchemy.sql import func
from sqlalchemy.orm import validates
from tornado.escape import xhtml_escape
from sqlalchemy import (Column, String, DateTime)


_discrete_models = []

Base = declarative_base()

class DiscreteModelFactory(DeclarativeMeta):
    def __new__(cls, class_name, parents, d):
        # This part defines our actual model
        d.setdefault('__tablename__', class_name.lower())
        d.setdefault('uid', Column(Integer, Sequence(class_name + '_id_seq'), primary_key=True))
        d.setdefault('name', Column(String))
        d.setdefault('description', Column(String))
        d.setdefault('__repr__', lambda self: "<{}(uid={}, name='{}')>".format(class_name, self.uid, self.name))
        # This part goes back through all models we have already created, and creates the appropriate links
        for model in _discrete_models + [None]:
            # Self-linking for first class defined, as _discrete_models will be empty
            if model:
                m_name = model.__name__
            else:
                m_name = class_name

            # Allows us to specify certain links we might not want
            # FIXME This code is never used, and probably not necessary
            if '_forbidden_edges' in d and m_name in d['_forbidden_edges']:
                continue

            # All combinations of generated models
            for a, b in [(class_name, m_name), (m_name, class_name), (class_name, class_name)]:
                # Extra attributes of the format [(cls,('att_name', att_value)), ...]
                # These are added to the relevant linker classes by gen_link
                extra = []
                if '_extra_atts' in d:
                    for att in d['_extra_atts']:
                        if att[0] == a:
                            extra.append(att[1])

                # This generates the attribute; for example, if `us` is A and `them` is B, this will add an attribute
                # B.as which links back to all instances of A (i.e. us) which are linked to it
                # Note that the relevant linker classes are generated just-in-time by gen_link
                @property
                def _tmp(self, _a=a, _b=b):
                    session = Session.object_session(self)
                    link_class = gen_link(_a, _b, extra)
                    links = session.query(link_class).filter(link_class.source == self.uid).all()
                    out = []
                    for l in links:
                        infodict = {'description':l.description}
                        if extra:
                            for att in extra:
                                for attr, val in att:
                                    infodict['attr'] = val
                        out.append((l._targetrel, infodict))
                    return out
                if a == class_name:
                    # We (our model) are `a`, so add a reference to `b` (i.e. them) to our model
                    d.setdefault(b.lower() + 's', _tmp)
                else:
                    # We (our model) are `b`, so add a reference to `b` (i.e. us) to their model
                    setattr(model, b.lower() + 's', _tmp)

        # Finally, create ourselves.
        our_model = type(class_name, parents, d)
        _discrete_models.append(our_model)
        return our_model

def gen_link(model1, model2, extra=None):
    if inspect.isclass(model1):
        first, second = model1.__name__, model2.__name__
    else:
        first, second = model1.__class__.__name__, model2.__class__.__name__
        model1, model2 = model1.__class__, model2.__class__

    class_name = first + second + 'Link'
    table_name = 'link_{}_{}'.format(first, second).lower()
    d = dict()
    d.setdefault('__table_args__', {'extend_existing': True})
    d.setdefault('__tablename__', table_name)
    d.setdefault('uid', Column(Integer, Sequence(class_name + '_id_seq'), primary_key=True))
    d.setdefault('target', Column(Integer, ForeignKey('{}.uid'.format(second).lower()), nullable=False))
    d.setdefault('source', Column(Integer, ForeignKey('{}.uid'.format(first).lower()), nullable=False))
    d.setdefault('_targetrel', relationship(model2, foreign_keys=d['target']))
    d.setdefault('description', Column(String))
    d.setdefault('__repr__', lambda self, _name=class_name:
                 "<{}(uid={}, source={}, target={})>".format(_name, self.uid, self.source, self.target))
    if extra:
        for att in extra:
            d.setdefault(att[0], att[1])
    return type(class_name, (Base,), d)

def link(session, obj1, obj2, extra=[], d1=None, d2=None):
    # Format of extra: [(name, value, instantiation), ...]
    # If `value` is not a Column, `instantiation` should probably be equal to it
    gl_extra = []
    for s in extra:
        gl_extra.append(s[0:2])

    if not (session and obj1 and obj2):
        return
    if not d2:
        d2 = d1
    link1 = gen_link(obj1, obj2, extra=gl_extra)(source=obj1.uid, target=obj2.uid, description=d1)
    link2 = gen_link(obj2, obj1, extra=gl_extra)(source=obj2.uid, target=obj1.uid, description=d2)

    for s in extra:
        setattr(link1, s[0], s[2])
        setattr(link2, s[0], s[2])
    session.add(link1)
    session.add(link2)
    session.commit()

#def setup_db(session, engine):
#    for model1 in _discrete_models:
#        for model2 in _discrete_models:
#            gen_link(model1(), model2())()
#            gen_link(model2(), model1())()
#
#    Base.metadata.create_all(engine)

class Anime(Base, metaclass=DiscreteModelFactory):
    mal_id = Column(Integer, unique=True)
    synonyms = Column(String)
    num_episodes = Column(Integer)
    kind = Column(String)
    status = Column(String)
    start_date = Column(Date)
    end_date = Column(Date)
    flags = Column(String)
    source = Column(String)
    duration = Column(Integer)
    rating = Column(String)
    season = Column(String)
    timeslot = Column(String)

class Manga(Base, metaclass=DiscreteModelFactory):
    mal_id = Column(Integer, unique=True)
    synonyms = Column(String)
    volumes = Column(Integer)
    chapters = Column(Integer)
    kind = Column(String)
    start_date = Column(Date)
    end_date = Column(Date)
    flags = Column(String)

class Character(Base, metaclass=DiscreteModelFactory):
    mal_id = Column(Integer)
    
class Episode(Base, metaclass=DiscreteModelFactory):
    number = Column(Integer)
    airdate = Column(Date)
    name_jp = Column(String)

class Genre(Base, metaclass=DiscreteModelFactory):
    pass
class Studio(Base, metaclass=DiscreteModelFactory):
    pass
class Producer(Base, metaclass=DiscreteModelFactory):
    pass
class Licensor(Base, metaclass=DiscreteModelFactory):
    pass
class Song(Base, metaclass=DiscreteModelFactory):
    pass
class Serialization(Base, metaclass=DiscreteModelFactory):
    pass
class User(Base, metaclass=DiscreteModelFactory):
    pass

class Person(Base, metaclass=DiscreteModelFactory):
    mal_id = Column(Integer, unique=True)
    given_name = Column(String)
    family_name = Column(String)
    birthday = Column(String)
    alt_names = Column(String)
    flags = Column(String)


class User(Base, metaclass=DiscreteModelFactory):
    """The User model.

    uid (int): The unique id of each `User`. `uid`s must not be exposed directly to end-users in any way
               without priorly being obfuscated.

    name (str): The username. Must be between 4 and 16 characters, and only contain dashes, underscores and 
                alphanumeric characters. Cannot start with a dash, and cannot be only composed of digits.
                Usernames have to be case-insensitively unique, meaning that `Bob` and `bob` should be treated as 
                the same user. However the original capitalization is still stored in the database and displayed on the website.

    password (str): The salted hash of the `User`'s password.

    joined (datetime): `datetime` object representing the exact time this `User` was created.

    """
    __tablename__ = 'users'

    name = Column(String, unique=True, nullable=False)
    email = Column(String, unique=True, nullable=False)
    password = Column(String, nullable=False)
    display_name = Column(String, nullable=False)
    joined = Column(DateTime(timezone=True), default=func.now())

    def __repr__(self):
        return "<User(uid='%s', name='%s', email='%s')>" % (self.uid, self.name, self.email)

    @validates("name")
    def validate_name(self, key, name):
        valid_username_regex = r"(?=(?=^[A-z])|(?=^\d(?!\d*$)))(?=[\w-]{3,16}$)"
        if re.match(valid_username_regex, name) is None or len(name) > 16:
            raise ValueError()
        else:
            return name.lower()

    @validates("email")
    def validate_email(self, key, email):
        if len(email) >= 4 and len(email) <= 128:
            return email.lower()
        else:
            raise ValueError()

    @validates("display_name")
    def validate_dname(self, key, dname):
        dname = xhtml_escape(dname)
        if len(dname) > 64:
            raise ValueError()
        else:
            return dname

    
engine = create_engine('postgresql://kahr:makama9makama9@localhost/test')
sess = sessionmaker(bind=engine)()

class X(Base, metaclass=DiscreteModelFactory): pass
class Y(Base, metaclass=DiscreteModelFactory): pass
x=X()
y=Y()
sess.add(x)
sess.add(y)
sess.commit()
