<template>
    <div>
	<div class="tabs">
    <ul>
      <nuxt-link v-for="(key, value) in pretty_status" :key="key" exact-active-class="is-active" tag="li" :to="'/list/'+list_type+'/'+value">
        <a>{{key}}</a>
      </nuxt-link>
      <nuxt-link exact-active-class="is-active" tag="li" :to="'/list/'+list_type+'/all'">
        <a>All</a>
      </nuxt-link>
    </ul>
	</div>
	<div v-if="entries.length">
	    <b-field>
		<b-input v-model="filter" placeholder="Filter..." class="filter">
		</b-input>
	    </b-field>
		<list-table :entries="filtered_list" :list_type="list_type" :data="data" :show_status="page_status == 'all'"></list-table>
	</div>
	<div v-else class="content has-text-grey has-text-centered">
	    <div class="padding">
		<p>
		    <b-icon icon="frown"
			    size="is-large">
		    </b-icon>
		</p>
		<p>Nothing here.</p>

		<import-form :list_type="list_type" :replace_list="true" @list-update="reload_list"></import-form>
	    </div>
	</div>
    </div>
</template>
<script>
 import { get_status_pretty, get_status_api } from '~/utils/list/status.js'
 import page_auth from '~/plugins/page-auth-mixin.js'
 import list_table from '~/components/list/list_table.vue'
 import import_form from '~/components/list/import_form.vue'
 import { filterList } from "~/utils/afs.js"

 async function asyncData({ params, $axios, store }) {
   const list_type = params.type
   const page_status = params.status || "current"
   
   await store.dispatch("list/ensureList", list_type)
   return { list_type, page_status }
 }
 export default {
    mixins: [page_auth(asyncData)],
    validate({ params }) {
      return ["anime", "manga", "novel"].includes(params.type)
    },
    data: function () {
      return {
        table_entries: null,
        cur_tab: "current",
        filter: '',
      }
    },
    components: {
      "list-table": list_table,
      "import-form": import_form
    },
    computed: {
      pretty_status() {
        return get_status_pretty(this.list_type)
      },
      api_status() {
        return get_status_api(this.list_type)
      },
      entries() {
        return this.$store.getters["list/list"](this.list_type)
      },
      data() {
        return this.$store.getters["list/data"][this.list_type]
      },
      filtered_list() {
        return filterList(this.filter, this.data, this.filter_entries(this.page_status))
      }
    },
    methods: {
      filter_entries: function (status) {
        if (status == "all") {
          return this.entries
        }
        const result = this.entries.filter(el => (el.entry.status == status))
        return result
      },
      async reload_list() {
        const { entries, data } = await asyncData({ params: { type: this.list_type }, $axios: this.$axios })
        this.entries = entries
        this.data = data
      },
      
    }
  }
</script>
<style scoped>
 .filter >>> input {
     border-top: none;
     border-left: none;
     border-right: none
 }
 .card >>> .level {
     padding-bottom: 5px !important;
 }

 .padding {
     padding: 8px;
 }
</style>
