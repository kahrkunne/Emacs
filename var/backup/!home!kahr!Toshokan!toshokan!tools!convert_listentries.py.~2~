from sqlalchemy import (Column, Integer, Sequence, ForeignKey, DateTime, String, Index, create_engine, Date, Float)
from sqlalchemy.sql import func
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

import pickle

from id_dict import id_dict

Base = declarative_base()

real_engine = create_engine('postgresql+psycopg2://smith:Memes123RKFhp@system.cf:5432/toshokan')
real_Session = sessionmaker(bind=real_engine)
real_session = real_Session()

db = {'engine': 'postgresql+psycopg2', 'user': 'kahr', 'password': 'makama9makama9',
      'domain': 'localhost', 'database': 'toshokan'}

engine = create_engine('{}://{}:{}@{}/{}'.format(db['engine'], db['user'], db['password'],
                                                 db['domain'], db['database']))
Session = sessionmaker(bind=engine)
session = Session()

class AnimeEntry(Base):
    __tablename__ = 'list_entries_anime'

    uid = Column(Integer, Sequence('anime_list_entry_id_seq'), primary_key=True, autoincrement=True)
    anime_id = Column(Integer, ForeignKey("anime.uid"), nullable=False)
    user_id = Column(Integer, ForeignKey("users.uid"), nullable=False)
    status = Column(Integer)
    num_watched = Column(Integer)
    score = Column(Integer)
    added = Column(DateTime(timezone=True), default=func.now())

    def __repr__(self):
        return "<AnimeEntry(uid='%s', title='%s', user='%s')>" % (self.uid, self.anime.uid, self.user.uid)

Index('anime_entry_qualifier', AnimeEntry.user_id, AnimeEntry.anime_id)

class ListEntry(Base):
    """An entry in an anime list."""
    __tablename__ = 'list_entries'

    uid = Column(Integer, Sequence('list_uid_seq'), primary_key=True)
    user = Column(String)
    title = Column(String)
    status = Column(Integer)
    num_watched = Column(Integer)
    score = Column(Integer)

class User(Base):
    """A user entry."""
    __tablename__ = 'users'

    uid = Column(Integer, Sequence('user_id_seq'), primary_key=True, autoincrement=True)
    name = Column(String, unique=True)

    joined = Column(DateTime(timezone=True), default=func.now())

class Anime(Base):
    __tablename__ = 'anime'

    uid = Column(Integer, Sequence('anime_id_seq'), primary_key=True)
    mal_id = Column(Integer, unique=True)
    title = Column(String)
    title_eng = Column(String)
    synonyms = Column(String)
    episodes = Column(Integer)
    mal_score = Column(Float)
    a_type = Column(String)
    status = Column(String)
    start_date = Column(Date)
    end_date = Column(Date)
    synopsis = Column(String)
    flags = Column(String)
    added = Column(DateTime(timezone=True), default=func.now())

counter = 50000000

entries = session.query(ListEntry).yield_per(500000)

user_ids = {v: k for k, v in dict(session.query(User.uid, User.name).all()).items()}
anime_ids = {v: k for k, v in dict(session.query(Anime.uid, Anime.title).all()).items()}

def page_query(q):
    offset = 50000000
    while True:
        r = False
        for elem in q.limit(500000).offset(offset):
            r = True
            yield elem
        offset += 500000
        if not r:
            break


def run():
    global counter
    for entry in page_query(session.query(ListEntry)):
        try:
            user_id = user_ids[entry.user]
        except:
            continue
        try:
            anime_id = anime_ids[entry.title]
        except:
            anime_id = None
        if not anime_id:
            try:
                anime_id = id_dict[entry.title]
                if anime_id not in anime_ids.values():
                    continue
            except:
                continue
        if counter % 50000 == 0:
            print('Processed {} entries!'.format(counter))
        if counter % 2000000 == 0:
            session.commit()
        counter += 1
        session.add(AnimeEntry(anime_id=anime_id, user_id=user_id, status=entry.status,
                               num_watched=entry.num_watched, score=entry.score))




missing = []
def find_missing():
    global counter
    entries = session.query(ListEntry).yield_per(500000)
    all_anime = session.query(Anime).all()
    titles = [x.title.lower() for x in all_anime]
    titles += [x.title_eng.lower() for x in all_anime]
    for a in all_anime:
        titles += [s.lower() for s in a.synonyms]
    for entry in entries:
        if entry.title.lower() not in titles and entry.title not in missing:
            missing.append(entry.title)
        if counter % 100000 == 0:
            print('Processed {} entries!'.format(counter))
        counter += 1

def get_user_name_set(n):
    with open('profile_links{}'.format(n), 'rb') as f:
        d = pickle.load(f)
    return [u.split('=')[1] for u in d]

all_names = []
for x in range(1,26):
    all_names += get_user_name_set(x)

names = list(set(all_names))

c2 = 0
def populate_users():
    global c2
    for name in names:
        if c2 % 10000 == 0:
            print('Added {} users!'.format(c2))
        if c2 % 500000 == 0:
            session.commit()
        c2 += 1
        session.add(User(name=name))
    session.commit()
